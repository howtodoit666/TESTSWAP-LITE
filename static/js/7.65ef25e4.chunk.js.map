{"version":3,"sources":["src/components/Heading.tsx","src/components/AmountMeta.tsx","src/components/InsufficientBalanceButton.tsx","src/components/Border.tsx","src/components/ChangeNetwork.tsx","src/components/ErrorMessage.tsx","src/components/InfoBox.tsx","src/components/ApproveButton.tsx","src/components/FetchingButton.tsx","src/components/Meta.tsx","src/components/TokenInput.tsx","src/components/Notice.tsx","src/components/Input.tsx","src/hooks/useSushiBar.tsx","src/hooks/useStakingState.tsx","src/screens/StakeScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","AmountMeta","t","useTranslation","textDark","textLight","placeholder","normal","amount","suffix","InsufficientBalanceButton","symbol","Border","border","width","backgroundColor","marginTop","ChangeNetwork","chainId","networkName","1","42","justifyContent","light","textAlign","marginVertical","large","ErrorMessage","error","borderColor","borderWidth","padding","code","note","message","InfoBox","darkMode","useContext","GlobalContext","backgroundLight","borderDark","useStyles","ApproveButton","approveToken","EthersContext","useState","loading","setLoading","useCallback","a","async","token","onError","address","spender","tx","wait","onSuccess","hidden","containerStyle","FetchingButton","Meta","textMedium","useLinker","url","label","undefined","textDecorationLine","MaxButton","onPressMax","balance","isETH","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","Platform","OS","maxButtonText","TokenInput","onChangeText","onAmountChanged","parseBalance","e","endsWith","indexOf","length","value","keyboardType","autoFocus","inputStyle","marginHorizontal","inputContainerStyle","borderBottomWidth","labelStyle","fontFamily","paddingTop","hideMaxButton","Notice","borderStyle","clear","titleStyle","paddingVertical","alignSelf","Input","errors","forbidden","forEach","validation","match","regexp","push","allowed","join","minHeight","outline","placeholderTextColor","errorStyle","useSushiBar","enter","signer","sushiBar","getContract","SUSHI_BAR","estimateGas","gasLimit","mul","div","logTransaction","toString","leave","useStakingState","getTokenAllowance","tokens","updateTokens","sushiStaked","setSushiStaked","sushiSupply","setSushiSupply","xSushiSupply","setXSushiSupply","setAmount","sushiAllowed","setSushiAllowed","xSushiAllowed","setXSushiAllowed","entering","setEntering","leaving","setLeaving","sushi","useMemo","find","xSushi","useEffect","useAsyncEffect","minAllowance","BigNumber","from","pow","sushiAllowance","gte","xSushiAllowance","sushiContract","balanceOf","totalSupply","xSushiContract","onEnter","parsed","onLeave","Staking","state","SushiBalance","AmountInput","isZero","StakeInfo","isEmptyValue","xSushiAmount","xSushiTotal","xSushiBalance","add","share","Fraction","Controls","setError","StakeButton","StakeScreen"],"mappings":"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","file":"static/js/7.65ef25e4.chunk.js","sourcesContent":["import React, { FC } from \"react\";\r\nimport { TextStyle } from \"react-native\";\r\n\r\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\r\nimport useColors from \"../hooks/useColors\";\r\nimport Button from \"./Button\";\r\nimport FlexView from \"./FlexView\";\r\nimport Text from \"./Text\";\r\n\r\ninterface HeadingProps {\r\n    text: string;\r\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\r\n    disabled?: boolean;\r\n    buttonText?: string;\r\n    onPressButton?: () => void | Promise<void>;\r\n    style?: TextStyle;\r\n}\r\n\r\nconst Heading: FC<HeadingProps> = props => {\r\n    const { accent } = useColors();\r\n    return (\r\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\r\n            <Text\r\n                medium={true}\r\n                fontWeight={props.fontWeight || \"bold\"}\r\n                disabled={props.disabled}\r\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\r\n                {props.text}\r\n            </Text>\r\n            {props.buttonText && (\r\n                <Button\r\n                    type={\"clear\"}\r\n                    size={\"small\"}\r\n                    title={props.buttonText}\r\n                    onPress={props.onPressButton}\r\n                    color={accent}\r\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\r\n                />\r\n            )}\r\n        </FlexView>\r\n    );\r\n};\r\n\r\nexport default Heading;\r\n","import React, { FC } from \"react\";\r\n\r\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\r\nimport useColors from \"../hooks/useColors\";\r\nimport useTranslation from \"../hooks/useTranslation\";\r\nimport Text from \"./Text\";\r\n\r\nexport interface AmountMetaProps {\r\n    amount?: string;\r\n    suffix?: string;\r\n    disabled?: boolean;\r\n}\r\n\r\nconst AmountMeta: FC<AmountMetaProps> = props => {\r\n    const t = useTranslation();\r\n    const { textDark, textLight, placeholder } = useColors();\r\n    return (\r\n        <Text\r\n            style={{\r\n                fontSize: IS_DESKTOP ? 28 : 20,\r\n                marginBottom: Spacing.normal,\r\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\r\n            }}>\r\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\r\n        </Text>\r\n    );\r\n};\r\n\r\nexport default AmountMeta;\r\n","import React from \"react\";\r\n\r\nimport useTranslation from \"../hooks/useTranslation\";\r\nimport Button from \"./Button\";\r\n\r\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\r\n    const t = useTranslation();\r\n    return <Button title={symbol ? t(\"insufficient-\", { symbol }) : t(\"insufficient-balance\")} disabled={true} />;\r\n};\r\nexport default InsufficientBalanceButton;\r\n","import React from \"react\";\r\nimport { View } from \"react-native\";\r\n\r\nimport { Spacing } from \"../constants/dimension\";\r\nimport useColors from \"../hooks/useColors\";\r\n\r\nconst Border = props => {\r\n    const { border } = useColors();\r\n    return (\r\n        <View\r\n            style={{\r\n                height: 1,\r\n                width: \"100%\",\r\n                backgroundColor: border,\r\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\r\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Border;\r\n","import React from \"react\";\r\nimport { View } from \"react-native\";\r\n\r\nimport { Spacing } from \"../constants/dimension\";\r\nimport useTranslation from \"../hooks/useTranslation\";\r\nimport Text from \"./Text\";\r\n\r\nconst ChangeNetwork = ({ chainId = 1 }) => {\r\n    const t = useTranslation();\r\n    const networkName = {\r\n        1: \"Mainnet\",\r\n        42: \"Kovan\"\r\n    }[chainId];\r\n    return (\r\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n            <Text light={true} style={{ textAlign: \"center\", marginVertical: Spacing.large }}>\r\n                {t(\"change-network-to\", { networkName })}\r\n            </Text>\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default ChangeNetwork;\r\n","import React from \"react\";\r\nimport { View } from \"react-native\";\r\n\r\nimport { Spacing } from \"../constants/dimension\";\r\nimport MetamaskError from \"../types/MetamaskError\";\r\nimport Text from \"./Text\";\r\n\r\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\r\n    <View\r\n        style={{\r\n            borderColor: \"red\",\r\n            borderWidth: 1,\r\n            width: \"100%\",\r\n            padding: Spacing.tiny,\r\n            marginTop: Spacing.small\r\n        }}>\r\n        {error.code && (\r\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\r\n                Error Code {error.code}\r\n            </Text>\r\n        )}\r\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\r\n            {error.message}\r\n        </Text>\r\n    </View>\r\n);\r\n\r\nexport default ErrorMessage;\r\n","import React, { PropsWithChildren, useContext } from \"react\";\r\nimport { View, ViewProps } from \"react-native\";\r\n\r\nimport { Spacing } from \"../constants/dimension\";\r\nimport { GlobalContext } from \"../context/GlobalContext\";\r\nimport useColors from \"../hooks/useColors\";\r\nimport useStyles from \"../hooks/useStyles\";\r\n\r\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\r\n    const { darkMode } = useContext(GlobalContext);\r\n    const { backgroundLight, borderDark } = useColors();\r\n    const { border } = useStyles();\r\n    return (\r\n        <View\r\n            {...props}\r\n            style={[\r\n                {\r\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\r\n                    backgroundColor: backgroundLight,\r\n                    marginTop: Spacing.normal + Spacing.small,\r\n                    padding: Spacing.small + Spacing.tiny\r\n                },\r\n                props.style\r\n            ]}\r\n        />\r\n    );\r\n};\r\n\r\nexport default InfoBox;\r\n","import React, { FC, useCallback, useContext, useState } from \"react\";\r\nimport { View } from \"react-native\";\r\n\r\nimport { Spacing } from \"../constants/dimension\";\r\nimport { EthersContext } from \"../context/EthersContext\";\r\nimport useTranslation from \"../hooks/useTranslation\";\r\nimport Token from \"../types/Token\";\r\nimport Button from \"./Button\";\r\n\r\nexport interface ApproveButtonProps {\r\n    token: Token;\r\n    spender: string;\r\n    onSuccess: () => void;\r\n    onError: (e) => void;\r\n    hidden?: boolean;\r\n}\r\n\r\nconst ApproveButton: FC<ApproveButtonProps> = props => {\r\n    const t = useTranslation();\r\n    const { approveToken } = useContext(EthersContext);\r\n    const [loading, setLoading] = useState(false);\r\n    const onPress = useCallback(async () => {\r\n        if (props.token) {\r\n            props.onError({});\r\n            setLoading(true);\r\n            try {\r\n                const tx = await approveToken(props.token.address, props.spender);\r\n                if (tx) {\r\n                    await tx.wait();\r\n                    props.onSuccess();\r\n                }\r\n            } catch (e) {\r\n                props.onError(e);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n    }, [props.token]);\r\n    if (props.hidden) return <View />;\r\n    return (\r\n        <Button\r\n            title={t(\"approve-\", { symbol: props.token?.symbol || \"\" })}\r\n            onPress={onPress}\r\n            loading={loading}\r\n            containerStyle={{ marginBottom: Spacing.tiny }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ApproveButton;\r\n","import React from \"react\";\r\n\r\nimport useTranslation from \"../hooks/useTranslation\";\r\nimport Button from \"./Button\";\r\n\r\nconst FetchingButton = () => {\r\n    const t = useTranslation();\r\n    return <Button title={t(\"fetching\")} disabled={true} />;\r\n};\r\nexport default FetchingButton;\r\n","import React, { FC } from \"react\";\r\n\r\nimport { IS_DESKTOP } from \"../constants/dimension\";\r\nimport useColors from \"../hooks/useColors\";\r\nimport useLinker from \"../hooks/useLinker\";\r\nimport useTranslation from \"../hooks/useTranslation\";\r\nimport FlexView from \"./FlexView\";\r\nimport Text from \"./Text\";\r\n\r\nexport interface MetaProps {\r\n    label: string;\r\n    text?: string;\r\n    suffix?: string;\r\n    url?: string;\r\n    disabled?: boolean;\r\n}\r\n\r\nconst Meta: FC<MetaProps> = props => {\r\n    const t = useTranslation();\r\n    const { textMedium, textLight, placeholder } = useColors();\r\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\r\n    const text = props.disabled\r\n        ? \"N/A\"\r\n        : props.text\r\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\r\n        : t(\"fetching\");\r\n    return (\r\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\r\n            <Text note={!IS_DESKTOP} fontWeight={\"bold\"} style={{ color: props.disabled ? placeholder : textMedium }}>\r\n                {props.label}\r\n            </Text>\r\n            <Text\r\n                note={!IS_DESKTOP}\r\n                onPress={props.url ? onPress : undefined}\r\n                style={{\r\n                    color: props.disabled ? placeholder : props.text ? textMedium : textLight,\r\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\r\n                }}>\r\n                {text}\r\n            </Text>\r\n        </FlexView>\r\n    );\r\n};\r\n\r\nexport default Meta;\r\n","import React, { FC, useCallback } from \"react\";\r\nimport { Platform, View } from \"react-native\";\r\n\r\nimport { ethers } from \"ethers\";\r\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\r\nimport useColors from \"../hooks/useColors\";\r\nimport useStyles from \"../hooks/useStyles\";\r\nimport Token from \"../types/Token\";\r\nimport { formatBalance, isETH, parseBalance, pow10 } from \"../utils\";\r\nimport Button from \"./Button\";\r\nimport Heading from \"./Heading\";\r\nimport Input from \"./Input\";\r\n\r\nexport interface TokenInputProps {\r\n    title?: string;\r\n    token?: Token;\r\n    amount: string;\r\n    onAmountChanged: (amount: string) => void;\r\n    label?: string;\r\n    hideMaxButton?: boolean;\r\n    maxButtonText?: string;\r\n    autoFocus?: boolean;\r\n}\r\n\r\n// tslint:disable-next-line:max-func-body-length\r\nconst TokenInput: FC<TokenInputProps> = props => {\r\n    const { border } = useStyles();\r\n    const onChangeText = useCallback(\r\n        (text: string) => {\r\n            if (props.token && props.onAmountChanged) {\r\n                try {\r\n                    parseBalance(text, props.token.decimals);\r\n                    props.onAmountChanged(text);\r\n                } catch (e) {\r\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\r\n                        props.onAmountChanged(text);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        [props.token, props.onAmountChanged]\r\n    );\r\n    return (\r\n        <View>\r\n            {props.title && <Heading text={props.title} />}\r\n            <View>\r\n                <Input\r\n                    label={props.label}\r\n                    value={props.amount}\r\n                    onChangeText={onChangeText}\r\n                    placeholder={\"0.0\"}\r\n                    keyboardType={\"numeric\"}\r\n                    autoFocus={props.autoFocus || false}\r\n                    inputStyle={{ marginHorizontal: Spacing.tiny }}\r\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\r\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\r\n                    containerStyle={{\r\n                        ...border(),\r\n                        paddingHorizontal: Spacing.tiny,\r\n                        paddingTop: 15,\r\n                        paddingBottom: 2\r\n                    }}\r\n                />\r\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\r\n                    <MaxButton\r\n                        token={props.token}\r\n                        maxButtonText={props.maxButtonText}\r\n                        updateAmount={props.onAmountChanged}\r\n                    />\r\n                )}\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\r\n    const { accent } = useColors();\r\n    const onPressMax = useCallback(() => {\r\n        if (props.token) {\r\n            let balance = props.token.balance;\r\n            if (isETH(props.token)) {\r\n                // Subtract 0.01 ETH for gas fee\r\n                const fee = pow10(16);\r\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\r\n            }\r\n            props.updateAmount(formatBalance(balance, props.token.decimals));\r\n        }\r\n    }, [props.token, props.updateAmount]);\r\n    return (\r\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 12 : 24 }}>\r\n            <Button\r\n                type={\"clear\"}\r\n                size={\"small\"}\r\n                color={accent}\r\n                title={props.maxButtonText || (IS_DESKTOP ? \"MAX \" + props.token.symbol : \"MAX\")}\r\n                fontWeight={\"bold\"}\r\n                onPress={onPressMax}\r\n                buttonStyle={{ paddingHorizontal: Spacing.tiny }}\r\n            />\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default TokenInput;\r\n","import React from \"react\";\r\nimport { View, ViewStyle } from \"react-native\";\r\n\r\nimport { Spacing } from \"../constants/dimension\";\r\nimport useColors from \"../hooks/useColors\";\r\nimport useStyles from \"../hooks/useStyles\";\r\nimport Button from \"./Button\";\r\nimport Text from \"./Text\";\r\n\r\nexport interface NoticeProps {\r\n    text: string;\r\n    clear?: boolean;\r\n    color?: string;\r\n    buttonText?: string;\r\n    onPressButton?: () => void;\r\n    style?: ViewStyle;\r\n}\r\n\r\nconst Notice = (props: NoticeProps) => {\r\n    const { textLight } = useColors();\r\n    const { border } = useStyles();\r\n    const borderStyle = border({ color: props.color });\r\n    const color = props.color || textLight;\r\n    return (\r\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\r\n            <Text note={true} style={{ color }}>\r\n                {props.text}\r\n            </Text>\r\n            {props.buttonText && props.onPressButton && (\r\n                <Button\r\n                    title={props.buttonText}\r\n                    type={\"clear\"}\r\n                    size={\"small\"}\r\n                    fontWeight={\"bold\"}\r\n                    onPress={props.onPressButton}\r\n                    titleStyle={{ color }}\r\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\r\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\r\n                />\r\n            )}\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default Notice;\r\n","import React, { FC, useCallback } from \"react\";\r\nimport { Platform } from \"react-native\";\r\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\r\n\r\nimport useColors from \"../hooks/useColors\";\r\n\r\nexport interface Validation {\r\n    regexp: RegExp;\r\n    error: string;\r\n}\r\n\r\nexport interface InputProps extends NativeInputProps {\r\n    color?: string;\r\n    size?: \"small\" | \"normal\" | \"large\";\r\n    allowed?: Validation[];\r\n    forbidden?: Validation[];\r\n    onError?: (error: string) => void;\r\n}\r\n\r\n// tslint:disable-next-line:max-func-body-length\r\nconst Input: FC<InputProps> = props => {\r\n    const { textDark, textMedium, textLight } = useColors();\r\n    const size = props.size || \"normal\";\r\n    const color = props.color || textDark;\r\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\r\n    const onChangeText = useCallback(\r\n        (text: string) => {\r\n            props.onChangeText?.(text);\r\n            props.onError?.(\"\");\r\n            const errors = [] as string[];\r\n            if (text !== \"\" && props.forbidden) {\r\n                props.forbidden.forEach(validation => {\r\n                    if (text.match(validation.regexp)) {\r\n                        errors.push(validation.error);\r\n                    }\r\n                });\r\n            }\r\n            if (text !== \"\" && props.allowed) {\r\n                props.allowed.forEach(validation => {\r\n                    if (!text.match(validation.regexp)) {\r\n                        errors.push(validation.error);\r\n                    }\r\n                });\r\n            }\r\n            if (errors.length > 0) {\r\n                props.onError?.(errors.join(\"\\n\"));\r\n            }\r\n        },\r\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\r\n    );\r\n    return (\r\n        <NativeInput\r\n            {...props}\r\n            inputStyle={[\r\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\r\n                // @ts-ignore\r\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\r\n                props.inputStyle\r\n            ]}\r\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\r\n            placeholderTextColor={props.placeholderTextColor || textLight}\r\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\r\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\r\n            onChangeText={onChangeText}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Input;\r\n","import { useCallback } from \"react\";\r\n\r\nimport { ethers } from \"ethers\";\r\nimport { SUSHI_BAR } from \"../constants/contracts\";\r\nimport { getContract } from \"../utils\";\r\nimport { logTransaction } from \"../utils/analytics-utils\";\r\n\r\nconst useSushiBar = () => {\r\n    const enter = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\r\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\r\n        const gasLimit = await sushiBar.estimateGas.enter(amount);\r\n        const tx = await sushiBar.enter(amount, {\r\n            gasLimit: gasLimit.mul(120).div(100)\r\n        });\r\n        return logTransaction(tx, \"SushiBar.enter()\", amount.toString());\r\n    }, []);\r\n\r\n    const leave = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\r\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\r\n        const gasLimit = await sushiBar.estimateGas.leave(amount);\r\n        const tx = await sushiBar.leave(amount, {\r\n            gasLimit: gasLimit.mul(120).div(100)\r\n        });\r\n        return logTransaction(tx, \"SushiBar.leave()\", amount.toString());\r\n    }, []);\r\n\r\n    return {\r\n        enter,\r\n        leave\r\n    };\r\n};\r\n\r\nexport default useSushiBar;\r\n","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\r\n\r\nimport { ethers } from \"ethers\";\r\nimport useAsyncEffect from \"use-async-effect\";\r\nimport { SUSHI_BAR } from \"../constants/contracts\";\r\nimport { EthersContext } from \"../context/EthersContext\";\r\nimport Token from \"../types/Token\";\r\nimport { getContract, parseBalance } from \"../utils\";\r\nimport useSushiBar from \"./useSushiBar\";\r\n\r\nexport type StakeAction = \"sushi-balance\" | \"stake\";\r\nexport type UnstakeAction = \"xsushi-balance\" | \"unstake\";\r\n\r\nexport interface StakingState {\r\n    sushi?: Token;\r\n    xSushi?: Token;\r\n    sushiStaked?: ethers.BigNumber;\r\n    sushiSupply?: ethers.BigNumber;\r\n    xSushiSupply?: ethers.BigNumber;\r\n    amount: string;\r\n    setAmount: (amount: string) => void;\r\n    sushiAllowed: boolean;\r\n    setSushiAllowed: (allowed: boolean) => void;\r\n    xSushiAllowed: boolean;\r\n    setXSushiAllowed: (allowed: boolean) => void;\r\n    loading: boolean;\r\n    onEnter: () => Promise<void>;\r\n    entering: boolean;\r\n    onLeave: () => Promise<void>;\r\n    leaving: boolean;\r\n}\r\n\r\n// tslint:disable-next-line:max-func-body-length\r\nconst useStakingState: () => StakingState = () => {\r\n    const { signer, address, getTokenAllowance, tokens, updateTokens } = useContext(EthersContext);\r\n    const { enter, leave } = useSushiBar();\r\n    const [sushiStaked, setSushiStaked] = useState<ethers.BigNumber>();\r\n    const [sushiSupply, setSushiSupply] = useState<ethers.BigNumber>();\r\n    const [xSushiSupply, setXSushiSupply] = useState<ethers.BigNumber>();\r\n    const [amount, setAmount] = useState(\"\");\r\n    const [sushiAllowed, setSushiAllowed] = useState(false);\r\n    const [xSushiAllowed, setXSushiAllowed] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [entering, setEntering] = useState(false);\r\n    const [leaving, setLeaving] = useState(false);\r\n\r\n    const sushi = useMemo(() => tokens.find(token => token.symbol === \"SUSHI\"), [tokens]);\r\n    const xSushi = useMemo(() => tokens.find(token => token.symbol === \"xSUSHI\"), [tokens]);\r\n\r\n    useEffect(() => {\r\n        setAmount(\"\");\r\n    }, [address]);\r\n\r\n    useAsyncEffect(async () => {\r\n        if (sushi && xSushi && signer) {\r\n            setSushiAllowed(false);\r\n            setXSushiAllowed(false);\r\n            setLoading(true);\r\n            try {\r\n                const minAllowance = ethers.BigNumber.from(2)\r\n                    .pow(96)\r\n                    .sub(1);\r\n                const sushiAllowance = await getTokenAllowance(sushi.address, SUSHI_BAR);\r\n                setSushiAllowed(ethers.BigNumber.from(sushiAllowance).gte(minAllowance));\r\n                const xSushiAllowance = await getTokenAllowance(xSushi.address, SUSHI_BAR);\r\n                setXSushiAllowed(ethers.BigNumber.from(xSushiAllowance).gte(minAllowance));\r\n\r\n                const sushiContract = getContract(\"ERC20\", sushi.address, signer);\r\n                setSushiStaked(await sushiContract.balanceOf(SUSHI_BAR));\r\n                setSushiSupply(await sushiContract.totalSupply());\r\n                const xSushiContract = getContract(\"ERC20\", xSushi.address, signer);\r\n                setXSushiSupply(await xSushiContract.totalSupply());\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n    }, [sushi, xSushi, signer]);\r\n\r\n    const onEnter = useCallback(async () => {\r\n        if (amount && sushi && signer) {\r\n            setEntering(true);\r\n            try {\r\n                const parsed = parseBalance(amount, sushi.decimals);\r\n                const tx = await enter(parsed, signer);\r\n                if (tx) {\r\n                    await tx.wait();\r\n                    await updateTokens();\r\n                    setAmount(\"\");\r\n                }\r\n            } finally {\r\n                setEntering(false);\r\n            }\r\n        }\r\n    }, [amount, sushi, signer]);\r\n\r\n    const onLeave = useCallback(async () => {\r\n        if (amount && xSushi && signer) {\r\n            setLeaving(true);\r\n            try {\r\n                const parsed = parseBalance(amount, xSushi.decimals);\r\n                const tx = await leave(parsed, signer);\r\n                if (tx) {\r\n                    await tx.wait();\r\n                    await updateTokens();\r\n                    setAmount(\"\");\r\n                }\r\n            } finally {\r\n                setLeaving(false);\r\n            }\r\n        }\r\n    }, [amount, xSushi, signer]);\r\n\r\n    return {\r\n        sushi,\r\n        xSushi,\r\n        sushiStaked,\r\n        sushiSupply,\r\n        xSushiSupply,\r\n        amount,\r\n        setAmount,\r\n        sushiAllowed,\r\n        setSushiAllowed,\r\n        xSushiAllowed,\r\n        setXSushiAllowed,\r\n        loading,\r\n        onEnter,\r\n        entering,\r\n        onLeave,\r\n        leaving\r\n    };\r\n};\r\n\r\nexport default useStakingState;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Platform, View } from \"react-native\";\r\n\r\nimport AmountMeta from \"../components/AmountMeta\";\r\nimport ApproveButton from \"../components/ApproveButton\";\r\nimport BackgroundImage from \"../components/BackgroundImage\";\r\nimport Border from \"../components/Border\";\r\nimport Button from \"../components/Button\";\r\nimport ChangeNetwork from \"../components/ChangeNetwork\";\r\nimport Container from \"../components/Container\";\r\nimport Content from \"../components/Content\";\r\nimport ErrorMessage from \"../components/ErrorMessage\";\r\nimport FetchingButton from \"../components/FetchingButton\";\r\nimport Heading from \"../components/Heading\";\r\nimport InfoBox from \"../components/InfoBox\";\r\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\r\nimport Meta from \"../components/Meta\";\r\nimport Notice from \"../components/Notice\";\r\nimport Text from \"../components/Text\";\r\nimport Title from \"../components/Title\";\r\nimport TokenInput from \"../components/TokenInput\";\r\nimport WebFooter from \"../components/web/WebFooter\";\r\nimport { StakingSubMenu } from \"../components/web/WebSubMenu\";\r\nimport { SUSHI_BAR } from \"../constants/contracts\";\r\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\r\nimport Fraction from \"../constants/Fraction\";\r\nimport { EthersContext } from \"../context/EthersContext\";\r\nimport useStakingState, { StakingState } from \"../hooks/useStakingState\";\r\nimport useTranslation from \"../hooks/useTranslation\";\r\nimport MetamaskError from \"../types/MetamaskError\";\r\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\r\nimport Screen from \"./Screen\";\r\n\r\nconst StakeScreen = () => {\r\n    const t = useTranslation();\r\n    return (\r\n        <Screen>\r\n            <Container>\r\n                <BackgroundImage />\r\n                <Content>\r\n                    <Title text={t(\"stake\")} />\r\n                    <Text light={true}>{t(\"stake-desc\")}</Text>\r\n                    <Staking />\r\n                </Content>\r\n                {Platform.OS === \"web\" && <WebFooter />}\r\n            </Container>\r\n            <StakingSubMenu />\r\n        </Screen>\r\n    );\r\n};\r\n\r\nconst Staking = () => {\r\n    const { chainId } = useContext(EthersContext);\r\n    const t = useTranslation();\r\n    const state = useStakingState();\r\n    if (chainId !== 1) return <ChangeNetwork />;\r\n    return (\r\n        <View style={{ marginTop: Spacing.large }}>\r\n            <SushiBalance state={state} />\r\n            <Border />\r\n            <AmountInput state={state} />\r\n            {state.sushi && state.sushi.balance.isZero() && (\r\n                <Notice text={t(\"you-dont-have-sushi\")} color={\"orange\"} style={{ marginTop: Spacing.small }} />\r\n            )}\r\n            <StakeInfo state={state} />\r\n        </View>\r\n    );\r\n};\r\n\r\nconst SushiBalance = ({ state }: { state: StakingState }) => {\r\n    const t = useTranslation();\r\n    return (\r\n        <View>\r\n            <Heading text={t(\"your-sushi\")} />\r\n            <AmountMeta\r\n                amount={state.sushi ? formatBalance(state.sushi.balance, state.sushi.decimals) : \"\"}\r\n                suffix={\"SUSHI\"}\r\n            />\r\n        </View>\r\n    );\r\n};\r\n\r\nconst AmountInput = ({ state }: { state: StakingState }) => {\r\n    const t = useTranslation();\r\n    if (!state.sushi || state.sushi.balance.isZero()) {\r\n        return <Heading text={t(\"amount-to-stake\")} disabled={true} />;\r\n    }\r\n    return (\r\n        <View>\r\n            <Heading text={t(\"amount-to-stake\")} />\r\n            <TokenInput\r\n                token={state.sushi}\r\n                amount={state.amount}\r\n                onAmountChanged={state.setAmount}\r\n                autoFocus={IS_DESKTOP}\r\n            />\r\n        </View>\r\n    );\r\n};\r\n\r\n// tslint:disable-next-line:max-func-body-length\r\nconst StakeInfo = ({ state }: { state: StakingState }) => {\r\n    const t = useTranslation();\r\n    const disabled =\r\n        !state.sushi ||\r\n        state.sushi.balance.isZero() ||\r\n        !state.xSushi ||\r\n        !state.sushiStaked ||\r\n        !state.xSushiSupply ||\r\n        isEmptyValue(state.amount);\r\n    const xSushiAmount = disabled\r\n        ? undefined\r\n        : parseBalance(state.amount, state.sushi!.decimals)\r\n              .mul(state.xSushiSupply!)\r\n              .div(state.sushiStaked!);\r\n    const xSushiTotal = disabled ? undefined : formatBalance(state.xSushiSupply!, state.xSushi!.decimals, 8);\r\n    const xSushiBalance = disabled ? undefined : state.xSushi!.balance.add(xSushiAmount!);\r\n    const share = disabled\r\n        ? undefined\r\n        : Fraction.from(xSushiAmount!.add(xSushiBalance!), state.xSushiSupply!).toString();\r\n    return (\r\n        <InfoBox>\r\n            <AmountMeta\r\n                amount={xSushiAmount ? formatBalance(xSushiAmount, state.xSushi!.decimals, 8) : \"\"}\r\n                suffix={\"xSUSHI\"}\r\n                disabled={disabled}\r\n            />\r\n            <Meta label={t(\"xsushi-share\")} text={share} suffix={\"%\"} disabled={disabled} />\r\n            <Meta label={t(\"total-xsushi\")} text={xSushiTotal} disabled={disabled} />\r\n            <Controls state={state} />\r\n        </InfoBox>\r\n    );\r\n};\r\n\r\nconst Controls = ({ state }: { state: StakingState }) => {\r\n    const [error, setError] = useState<MetamaskError>({});\r\n    return (\r\n        <View style={{ marginTop: Spacing.normal }}>\r\n            {!state.sushi || state.sushi.balance.isZero() || isEmptyValue(state.amount) ? (\r\n                <StakeButton state={state} onError={setError} disabled={true} />\r\n            ) : parseBalance(state.amount, state.sushi.decimals).gt(state.sushi.balance) ? (\r\n                <InsufficientBalanceButton symbol={state.sushi.symbol} />\r\n            ) : state.loading ? (\r\n                <FetchingButton />\r\n            ) : (\r\n                <>\r\n                    <ApproveButton\r\n                        token={state.sushi}\r\n                        spender={SUSHI_BAR}\r\n                        onSuccess={() => state.setSushiAllowed(true)}\r\n                        onError={setError}\r\n                        hidden={state.sushiAllowed}\r\n                    />\r\n                    <StakeButton state={state} onError={setError} disabled={!state.sushiAllowed} />\r\n                </>\r\n            )}\r\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\r\n        </View>\r\n    );\r\n};\r\n\r\nconst StakeButton = ({\r\n    state,\r\n    onError,\r\n    disabled\r\n}: {\r\n    state: StakingState;\r\n    onError: (e) => void;\r\n    disabled: boolean;\r\n}) => {\r\n    const t = useTranslation();\r\n    const onPress = async () => {\r\n        onError({});\r\n        try {\r\n            await state.onEnter();\r\n            state.setAmount(\"\");\r\n        } catch (e) {\r\n            onError(e);\r\n        }\r\n    };\r\n    return <Button title={t(\"stake\")} loading={state.entering} onPress={onPress} disabled={disabled} />;\r\n};\r\n\r\nexport default StakeScreen;\r\n"],"sourceRoot":""}