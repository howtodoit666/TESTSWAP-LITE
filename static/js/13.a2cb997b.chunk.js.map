{"version":3,"sources":["src/components/AmountMeta.tsx","src/components/InsufficientBalanceButton.tsx","src/components/ApproveButton.tsx","src/components/Notice.tsx","src/components/LPTokenSelect.tsx","src/hooks/useLPTokensState.tsx","src/hooks/useMasterChef.tsx","src/hooks/useFarmingState.tsx","src/screens/FarmingScreen.tsx"],"names":["AmountMeta","props","t","useTranslation","useColors","textDark","textLight","placeholder","style","fontSize","IS_DESKTOP","marginBottom","Spacing","normal","color","disabled","amount","suffix","InsufficientBalanceButton","symbol","title","ApproveButton","approveToken","useContext","EthersContext","useState","loading","setLoading","onPress","useCallback","a","async","token","onError","address","spender","tx","wait","onSuccess","hidden","containerStyle","tiny","Notice","borderStyle","border","useStyles","clear","note","text","buttonText","onPressButton","type","size","fontWeight","titleStyle","buttonStyle","paddingHorizontal","paddingVertical","alignSelf","marginTop","LPTokenList","state","emptyText","Item","renderItem","item","key","selected","onSelectToken","setSelectedLPToken","data","lpTokens","sort","p1","p2","m1","multiplier","m2","apy","length","EmptyList","keyExtractor","margin","textAlign","width","LPTokenItem","textMedium","balance","formatBalance","decimals","ITEM_SEPARATOR_HEIGHT","alignItems","tokenA","small","replaceWETH","tokenB","marginLeft","medium","caption","flex","light","LPTokenSelect","expanded","selectedLPToken","onExpand","updatingLPTokens","useLPTokensState","mode","useTokenPairState","provider","tokens","lastTimeRefreshed","setLastTimeRefreshed","setLPTokens","selectedLPTokenAllowed","setSelectedLPTokenAllowed","pair","setPair","setAmount","getPair","useSDK","updateLPTokens","fetchMyPools","fetchPools","fetchMyLPTokens","fetchMyUniswapLPTokens","useEffect","useAsyncEffect","undefined","useDelayedOnBlockEffect","block","fromToken","toToken","updateLastTimeRefreshed","Date","now","useMasterChef","deposit","lpTokenId","signer","masterChef","getContract","MASTER_CHEF","estimateGas","gasLimit","mul","div","logTransaction","toString","withdraw","useFarmingState","myPools","getTokenAllowance","depositing","setDepositing","withdrawing","setWithdrawing","setFromAmount","setToAmount","minAllowance","ethers","BigNumber","from","pow","sub","allowance","gte","totalSupply","amountDeposited","lpToken","convertToken","TokenAmount","lpTokenAmount","tokenAAmount","involvesToken","getLiquidityValue","toFixed","tokenBAmount","onDeposit","id","parseBalance","onWithdraw","Farming","chainId","large","TokenItem","Deposit","DepositInfo","marginRight","formatPercentage","isZero","AddLiquidityNotice","onAmountChanged","autoFocus","green","useLinker","isEmptyValue","sushiRewardedPerYear","sushiPerYear","pow10","label","formatUSD","totalValueUSD","DepositControls","error","setError","approveRequired","DepositButton","gt","message","code","catch","FarmingScreen","Platform","OS"],"mappings":"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","file":"static/js/13.a2cb997b.chunk.js","sourcesContent":["import React, { FC } from \"react\";\r\n\r\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\r\nimport useColors from \"../hooks/useColors\";\r\nimport useTranslation from \"../hooks/useTranslation\";\r\nimport Text from \"./Text\";\r\n\r\nexport interface AmountMetaProps {\r\n    amount?: string;\r\n    suffix?: string;\r\n    disabled?: boolean;\r\n}\r\n\r\nconst AmountMeta: FC<AmountMetaProps> = props => {\r\n    const t = useTranslation();\r\n    const { textDark, textLight, placeholder } = useColors();\r\n    return (\r\n        <Text\r\n            style={{\r\n                fontSize: IS_DESKTOP ? 28 : 20,\r\n                marginBottom: Spacing.normal,\r\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\r\n            }}>\r\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\r\n        </Text>\r\n    );\r\n};\r\n\r\nexport default AmountMeta;\r\n","import React from \"react\";\r\n\r\nimport useTranslation from \"../hooks/useTranslation\";\r\nimport Button from \"./Button\";\r\n\r\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\r\n    const t = useTranslation();\r\n    return <Button title={symbol ? t(\"insufficient-\", { symbol }) : t(\"insufficient-balance\")} disabled={true} />;\r\n};\r\nexport default InsufficientBalanceButton;\r\n","import React, { FC, useCallback, useContext, useState } from \"react\";\r\nimport { View } from \"react-native\";\r\n\r\nimport { Spacing } from \"../constants/dimension\";\r\nimport { EthersContext } from \"../context/EthersContext\";\r\nimport useTranslation from \"../hooks/useTranslation\";\r\nimport Token from \"../types/Token\";\r\nimport Button from \"./Button\";\r\n\r\nexport interface ApproveButtonProps {\r\n    token: Token;\r\n    spender: string;\r\n    onSuccess: () => void;\r\n    onError: (e) => void;\r\n    hidden?: boolean;\r\n}\r\n\r\nconst ApproveButton: FC<ApproveButtonProps> = props => {\r\n    const t = useTranslation();\r\n    const { approveToken } = useContext(EthersContext);\r\n    const [loading, setLoading] = useState(false);\r\n    const onPress = useCallback(async () => {\r\n        if (props.token) {\r\n            props.onError({});\r\n            setLoading(true);\r\n            try {\r\n                const tx = await approveToken(props.token.address, props.spender);\r\n                if (tx) {\r\n                    await tx.wait();\r\n                    props.onSuccess();\r\n                }\r\n            } catch (e) {\r\n                props.onError(e);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n    }, [props.token]);\r\n    if (props.hidden) return <View />;\r\n    return (\r\n        <Button\r\n            title={t(\"approve-\", { symbol: props.token?.symbol || \"\" })}\r\n            onPress={onPress}\r\n            loading={loading}\r\n            containerStyle={{ marginBottom: Spacing.tiny }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ApproveButton;\r\n","import React from \"react\";\r\nimport { View, ViewStyle } from \"react-native\";\r\n\r\nimport { Spacing } from \"../constants/dimension\";\r\nimport useColors from \"../hooks/useColors\";\r\nimport useStyles from \"../hooks/useStyles\";\r\nimport Button from \"./Button\";\r\nimport Text from \"./Text\";\r\n\r\nexport interface NoticeProps {\r\n    text: string;\r\n    clear?: boolean;\r\n    color?: string;\r\n    buttonText?: string;\r\n    onPressButton?: () => void;\r\n    style?: ViewStyle;\r\n}\r\n\r\nconst Notice = (props: NoticeProps) => {\r\n    const { textLight } = useColors();\r\n    const { border } = useStyles();\r\n    const borderStyle = border({ color: props.color });\r\n    const color = props.color || textLight;\r\n    return (\r\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\r\n            <Text note={true} style={{ color }}>\r\n                {props.text}\r\n            </Text>\r\n            {props.buttonText && props.onPressButton && (\r\n                <Button\r\n                    title={props.buttonText}\r\n                    type={\"clear\"}\r\n                    size={\"small\"}\r\n                    fontWeight={\"bold\"}\r\n                    onPress={props.onPressButton}\r\n                    titleStyle={{ color }}\r\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\r\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\r\n                />\r\n            )}\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default Notice;\r\n","import React, { FC, useCallback } from \"react\";\r\nimport { FlatList, View, ViewStyle } from \"react-native\";\r\n\r\nimport { Spacing } from \"../constants/dimension\";\r\nimport useColors from \"../hooks/useColors\";\r\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\r\nimport LPToken from \"../types/LPToken\";\r\nimport { formatBalance } from \"../utils\";\r\nimport CloseIcon from \"./CloseIcon\";\r\nimport Expandable from \"./Expandable\";\r\nimport FlexView from \"./FlexView\";\r\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\r\nimport Loading from \"./Loading\";\r\nimport Selectable from \"./Selectable\";\r\nimport SelectIcon from \"./SelectIcon\";\r\nimport Text from \"./Text\";\r\nimport TokenLogo from \"./TokenLogo\";\r\n\r\nexport type LPTokenSelectFilter = \"balance\" | \"amountDeposited\" | \"\";\r\n\r\nexport interface LPTokenSelectProps {\r\n    state: LPTokensState;\r\n    title: string;\r\n    emptyText: string;\r\n    Item: FC<LPTokenItemProps>;\r\n    style?: ViewStyle;\r\n}\r\n\r\nexport interface LPTokenItemProps {\r\n    token: LPToken;\r\n    selected: boolean;\r\n    onSelectToken: (token: LPToken) => void;\r\n}\r\n\r\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\r\n    const onUnselectToken = () => props.state.setSelectedLPToken();\r\n    return (\r\n        <View style={props.style}>\r\n            <Expandable\r\n                title={props.title}\r\n                expanded={!props.state.selectedLPToken}\r\n                onExpand={() => props.state.setSelectedLPToken()}>\r\n                <LPTokenList state={props.state} emptyText={props.emptyText} Item={props.Item} />\r\n            </Expandable>\r\n            {props.state.selectedLPToken && (\r\n                <props.Item token={props.state.selectedLPToken} selected={true} onSelectToken={onUnselectToken} />\r\n            )}\r\n        </View>\r\n    );\r\n};\r\n\r\n// tslint:disable-next-line:max-func-body-length\r\nconst LPTokenList = ({\r\n    state,\r\n    emptyText,\r\n    Item\r\n}: {\r\n    state: LPTokensState;\r\n    emptyText: string;\r\n    Item: FC<LPTokenItemProps>;\r\n}) => {\r\n    const renderItem = useCallback(\r\n        ({ item }) => {\r\n            return <Item key={item.symbol} token={item} selected={false} onSelectToken={state.setSelectedLPToken} />;\r\n        },\r\n        [state.setSelectedLPToken]\r\n    );\r\n    const data = state.lpTokens.sort((p1, p2) => {\r\n        const m1 = p1.multiplier || 0;\r\n        const m2 = p2.multiplier || 0;\r\n        return m1 === m2 ? (p2.apy || 0) - (p1.apy || 0) : m2 - m1;\r\n    });\r\n    return state.loading ? (\r\n        <Loading />\r\n    ) : data.length === 0 ? (\r\n        <EmptyList text={emptyText} />\r\n    ) : (\r\n        <FlatList keyExtractor={item => item.symbol} data={data} renderItem={renderItem} />\r\n    );\r\n};\r\n\r\nconst EmptyList = ({ text }: { text: string }) => {\r\n    return (\r\n        <View style={{ margin: Spacing.normal }}>\r\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\r\n                {text}\r\n            </Text>\r\n        </View>\r\n    );\r\n};\r\n\r\nexport const LPTokenItem: FC<LPTokenItemProps> = props => {\r\n    const { textMedium } = useColors();\r\n    const balance = formatBalance(props.token.balance, props.token.decimals, 6);\r\n    const onPress = useCallback(() => {\r\n        props.onSelectToken(props.token);\r\n    }, [props.onSelectToken, props.token]);\r\n    return (\r\n        <Selectable\r\n            selected={props.selected}\r\n            onPress={onPress}\r\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\r\n            <FlexView style={{ alignItems: \"center\" }}>\r\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\r\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\r\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\r\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\r\n                </Text>\r\n                <View style={{ flex: 1, marginLeft: Spacing.tiny }}>\r\n                    <Text caption={true} light={true} style={{ textAlign: \"right\", color: textMedium }}>\r\n                        {balance}\r\n                    </Text>\r\n                </View>\r\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\r\n            </FlexView>\r\n        </Selectable>\r\n    );\r\n};\r\n\r\nexport default LPTokenSelect;\r\n","import { useContext, useEffect, useState } from \"react\";\r\n\r\nimport { Pair } from \"@sushiswap/sdk\";\r\nimport useAsyncEffect from \"use-async-effect\";\r\nimport { EthersContext } from \"../context/EthersContext\";\r\nimport LPToken from \"../types/LPToken\";\r\nimport { fetchMyLPTokens, fetchMyPools, fetchMyUniswapLPTokens, fetchPools } from \"../utils/fetch-utils\";\r\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\r\nimport useSDK from \"./useSDK\";\r\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\r\n\r\nexport interface LPTokensState extends TokenPairState {\r\n    updateLPTokens: () => Promise<void>;\r\n    lastTimeRefreshed: number;\r\n    updateLastTimeRefreshed: () => void;\r\n    lpTokens: LPToken[];\r\n    selectedLPToken?: LPToken;\r\n    setSelectedLPToken: (token?: LPToken) => void;\r\n    selectedLPTokenAllowed: boolean;\r\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\r\n    pair?: Pair;\r\n    amount: string;\r\n    setAmount: (amount: string) => void;\r\n}\r\n\r\ntype Mode = \"pools\" | \"my-pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\r\n\r\nlet updatingLPTokens = false;\r\n\r\n// tslint:disable-next-line:max-func-body-length\r\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\r\n    const state = useTokenPairState();\r\n    const { provider, address, tokens } = useContext(EthersContext);\r\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\r\n    const [loading, setLoading] = useState(true);\r\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\r\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\r\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\r\n    const [pair, setPair] = useState<Pair>();\r\n    const [amount, setAmount] = useState(\"\");\r\n    const { getPair } = useSDK();\r\n\r\n    const updateLPTokens = async () => {\r\n        if (address && provider && tokens.length > 0 && !updatingLPTokens) {\r\n            try {\r\n                updatingLPTokens = true;\r\n                const data = await (mode === \"my-pools\"\r\n                    ? fetchMyPools(address, tokens, provider)\r\n                    : mode === \"pools\"\r\n                    ? fetchPools(address, tokens, provider)\r\n                    : mode === \"my-lp-tokens\"\r\n                    ? fetchMyLPTokens(address, tokens, provider)\r\n                    : fetchMyUniswapLPTokens(address, tokens, provider));\r\n                if (data) {\r\n                    setLPTokens(data);\r\n                }\r\n            } finally {\r\n                updatingLPTokens = false;\r\n                setLoading(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!selectedLPToken) {\r\n            setAmount(\"\");\r\n        }\r\n    }, [selectedLPToken]);\r\n\r\n    useAsyncEffect(async () => {\r\n        setLoading(true);\r\n        setPair(undefined);\r\n        if (selectedLPToken && provider) {\r\n            try {\r\n                setPair(await getPair(selectedLPToken.tokenA, selectedLPToken.tokenB, provider));\r\n            } catch (e) {\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        } else {\r\n            setLoading(false);\r\n        }\r\n    }, [selectedLPToken, provider]);\r\n\r\n    useDelayedOnBlockEffect(\r\n        async block => {\r\n            if (address && (mode === \"pools\" || tokens.length > 0)) {\r\n                if (!block) {\r\n                    setLoading(true);\r\n                }\r\n                await updateLPTokens();\r\n            }\r\n        },\r\n        () => \"updateLPTokens()\",\r\n        [tokens.length, address, lastTimeRefreshed],\r\n        0\r\n    );\r\n\r\n    return {\r\n        ...state,\r\n        fromToken: state.fromToken || selectedLPToken?.tokenA,\r\n        toToken: state.toToken || selectedLPToken?.tokenB,\r\n        updateLPTokens,\r\n        loading: state.loading || loading,\r\n        lastTimeRefreshed,\r\n        updateLastTimeRefreshed: () => {\r\n            setLastTimeRefreshed(Date.now());\r\n        },\r\n        lpTokens,\r\n        selectedLPToken,\r\n        setSelectedLPToken,\r\n        selectedLPTokenAllowed,\r\n        setSelectedLPTokenAllowed,\r\n        pair,\r\n        amount,\r\n        setAmount\r\n    };\r\n};\r\n\r\nexport default useLPTokensState;\r\n","import { useCallback } from \"react\";\r\n\r\nimport { ethers } from \"ethers\";\r\nimport { MASTER_CHEF } from \"../constants/contracts\";\r\nimport { getContract } from \"../utils\";\r\nimport { logTransaction } from \"../utils/analytics-utils\";\r\n\r\nconst useMasterChef = () => {\r\n    const deposit = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\r\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\r\n        const gasLimit = await masterChef.estimateGas.deposit(lpTokenId, amount);\r\n        const tx = await masterChef.deposit(lpTokenId, amount, {\r\n            gasLimit: gasLimit.mul(120).div(100)\r\n        });\r\n        return logTransaction(tx, \"MasterChef.deposit()\", lpTokenId, amount.toString());\r\n    }, []);\r\n\r\n    const withdraw = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\r\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\r\n        const gasLimit = await masterChef.estimateGas.withdraw(lpTokenId, amount);\r\n        const tx = await masterChef.withdraw(lpTokenId, amount, {\r\n            gasLimit: gasLimit.mul(120).div(100)\r\n        });\r\n        return logTransaction(tx, \"MasterChef.withdraw()\", lpTokenId, amount.toString());\r\n    }, []);\r\n\r\n    return {\r\n        deposit,\r\n        withdraw\r\n    };\r\n};\r\n\r\nexport default useMasterChef;\r\n","import { useCallback, useContext, useEffect, useState } from \"react\";\r\n\r\nimport { TokenAmount } from \"@sushiswap/sdk\";\r\nimport { ethers } from \"ethers\";\r\nimport useAsyncEffect from \"use-async-effect\";\r\nimport { MASTER_CHEF } from \"../constants/contracts\";\r\nimport { EthersContext } from \"../context/EthersContext\";\r\nimport { convertToken, parseBalance } from \"../utils\";\r\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\r\nimport useMasterChef from \"./useMasterChef\";\r\n\r\nexport interface FarmingState extends LPTokensState {\r\n    onDeposit: () => Promise<void>;\r\n    depositing: boolean;\r\n    onWithdraw: () => Promise<void>;\r\n    withdrawing: boolean;\r\n}\r\n\r\n// tslint:disable-next-line:max-func-body-length\r\nconst useFarmingState: (myPools: boolean) => FarmingState = myPools => {\r\n    const state = useLPTokensState(myPools ? \"my-pools\" : \"pools\");\r\n    const { signer, getTokenAllowance } = useContext(EthersContext);\r\n    const { deposit, withdraw } = useMasterChef();\r\n    const [loading, setLoading] = useState(false);\r\n    const [depositing, setDepositing] = useState(false);\r\n    const [withdrawing, setWithdrawing] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setLoading(false);\r\n        setDepositing(false);\r\n        setWithdrawing(false);\r\n        state.setFromAmount(\"\");\r\n        state.setToAmount(\"\");\r\n    }, [state.selectedLPToken]);\r\n\r\n    useAsyncEffect(async () => {\r\n        if (signer && state.selectedLPToken) {\r\n            setLoading(true);\r\n            state.setSelectedLPTokenAllowed(false);\r\n            try {\r\n                const minAllowance = ethers.BigNumber.from(2)\r\n                    .pow(96)\r\n                    .sub(1);\r\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MASTER_CHEF);\r\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n    }, [signer, state.selectedLPToken]);\r\n\r\n    useAsyncEffect(() => {\r\n        if (\r\n            state.pair &&\r\n            state.selectedLPToken &&\r\n            state.selectedLPToken.totalSupply &&\r\n            state.selectedLPToken.amountDeposited\r\n        ) {\r\n            const lpToken = convertToken(state.selectedLPToken);\r\n            const tokenA = convertToken(state.selectedLPToken.tokenA);\r\n            const tokenB = convertToken(state.selectedLPToken.tokenB);\r\n            const totalSupply = new TokenAmount(lpToken, state.selectedLPToken.totalSupply.toString());\r\n            const lpTokenAmount = new TokenAmount(lpToken, state.selectedLPToken.amountDeposited.toString());\r\n            const tokenAAmount = state.pair.involvesToken(tokenA)\r\n                ? state.pair.getLiquidityValue(tokenA, totalSupply, lpTokenAmount)\r\n                : null;\r\n            state.setFromAmount(tokenAAmount?.toFixed() || \"\");\r\n            const tokenBAmount = state.pair.involvesToken(tokenA)\r\n                ? state.pair.getLiquidityValue(tokenB, totalSupply, lpTokenAmount)\r\n                : null;\r\n            state.setToAmount(tokenBAmount?.toFixed() || \"\");\r\n        }\r\n    }, [state.pair, state.selectedLPToken]);\r\n\r\n    const onDeposit = useCallback(async () => {\r\n        if (state.selectedLPToken?.id && state.amount && signer) {\r\n            setDepositing(true);\r\n            try {\r\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\r\n                const tx = await deposit(state.selectedLPToken.id, amount, signer);\r\n                await tx.wait();\r\n                state.setSelectedLPToken(undefined);\r\n                await state.updateLastTimeRefreshed();\r\n            } finally {\r\n                setDepositing(false);\r\n            }\r\n        }\r\n    }, [state.selectedLPToken, state.amount, signer]);\r\n\r\n    const onWithdraw = useCallback(async () => {\r\n        if (state.selectedLPToken?.id && state.amount && signer) {\r\n            setWithdrawing(true);\r\n            try {\r\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\r\n                const tx = await withdraw(state.selectedLPToken.id, amount, signer);\r\n                await tx.wait();\r\n                state.setSelectedLPToken(undefined);\r\n                await state.updateLastTimeRefreshed();\r\n            } finally {\r\n                setWithdrawing(false);\r\n            }\r\n        }\r\n    }, [state.selectedLPToken, state.amount, signer]);\r\n\r\n    return {\r\n        ...state,\r\n        loading: state.loading || loading,\r\n        onDeposit,\r\n        depositing,\r\n        onWithdraw,\r\n        withdrawing\r\n    };\r\n};\r\n\r\nexport default useFarmingState;\r\n","import React, { FC, useCallback, useContext, useState } from \"react\";\r\nimport { Platform, View } from \"react-native\";\r\n\r\nimport useAsyncEffect from \"use-async-effect\";\r\nimport AmountMeta from \"../components/AmountMeta\";\r\nimport ApproveButton from \"../components/ApproveButton\";\r\nimport BackgroundImage from \"../components/BackgroundImage\";\r\nimport Border from \"../components/Border\";\r\nimport Button from \"../components/Button\";\r\nimport ChangeNetwork from \"../components/ChangeNetwork\";\r\nimport CloseIcon from \"../components/CloseIcon\";\r\nimport Container from \"../components/Container\";\r\nimport Content from \"../components/Content\";\r\nimport ErrorMessage from \"../components/ErrorMessage\";\r\nimport FetchingButton from \"../components/FetchingButton\";\r\nimport FlexView from \"../components/FlexView\";\r\nimport Heading from \"../components/Heading\";\r\nimport InfoBox from \"../components/InfoBox\";\r\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\r\nimport { ITEM_SEPARATOR_HEIGHT } from \"../components/ItemSeparator\";\r\nimport LPTokenSelect, { LPTokenItemProps } from \"../components/LPTokenSelect\";\r\nimport Meta from \"../components/Meta\";\r\nimport Notice from \"../components/Notice\";\r\nimport Selectable from \"../components/Selectable\";\r\nimport SelectIcon from \"../components/SelectIcon\";\r\nimport Text from \"../components/Text\";\r\nimport Title from \"../components/Title\";\r\nimport TokenInput from \"../components/TokenInput\";\r\nimport TokenLogo from \"../components/TokenLogo\";\r\nimport WebFooter from \"../components/web/WebFooter\";\r\nimport { FarmingSubMenu } from \"../components/web/WebSubMenu\";\r\nimport { MASTER_CHEF } from \"../constants/contracts\";\r\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\r\nimport { EthersContext } from \"../context/EthersContext\";\r\nimport useColors from \"../hooks/useColors\";\r\nimport useFarmingState, { FarmingState } from \"../hooks/useFarmingState\";\r\nimport useLinker from \"../hooks/useLinker\";\r\nimport useTranslation from \"../hooks/useTranslation\";\r\nimport MetamaskError from \"../types/MetamaskError\";\r\nimport { formatBalance, formatPercentage, formatUSD, isEmptyValue, parseBalance, pow10 } from \"../utils\";\r\nimport Screen from \"./Screen\";\r\n\r\nconst FarmingScreen = () => {\r\n    const t = useTranslation();\r\n    return (\r\n        <Screen>\r\n            <Container>\r\n                <BackgroundImage />\r\n                <Content>\r\n                    <Title text={t(\"plant-lp-tokens\")} />\r\n                    <Text light={true}>{t(\"plant-lp-tokens-desc\")}</Text>\r\n                    <Farming />\r\n                </Content>\r\n                {Platform.OS === \"web\" && <WebFooter />}\r\n            </Container>\r\n            <FarmingSubMenu />\r\n        </Screen>\r\n    );\r\n};\r\n\r\nconst Farming = () => {\r\n    const { chainId } = useContext(EthersContext);\r\n    const t = useTranslation();\r\n    const state = useFarmingState(false);\r\n    if (chainId !== 1) return <ChangeNetwork />;\r\n    return (\r\n        <View style={{ marginTop: Spacing.large }}>\r\n            <LPTokenSelect\r\n                state={state}\r\n                title={t(\"active-farms\")}\r\n                emptyText={t(\"unable-to-load-farms\")}\r\n                Item={TokenItem}\r\n            />\r\n            <Border />\r\n            <Deposit state={state} />\r\n            <DepositInfo state={state} />\r\n            <Notice text={t(\"sushi-vested-notice\")} clear={true} style={{ marginTop: Spacing.normal }} />\r\n        </View>\r\n    );\r\n};\r\n\r\n// tslint:disable-next-line:max-func-body-length\r\nconst TokenItem: FC<LPTokenItemProps> = props => {\r\n    const apy = props.token.apy || 0;\r\n    const multiplier = props.token.multiplier || 0;\r\n    const onPress = useCallback(() => {\r\n        props.onSelectToken(props.token);\r\n    }, [props.onSelectToken, props.token]);\r\n    return (\r\n        <Selectable\r\n            selected={props.selected}\r\n            onPress={onPress}\r\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\r\n            <FlexView style={{ alignItems: \"center\" }}>\r\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\r\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\r\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\r\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\r\n                </Text>\r\n                <View style={{ flex: 1, alignItems: \"flex-end\", marginRight: 4 }}>\r\n                    <Text note={true}>\r\n                        {multiplier > 1 ? \"✨\" : \"\"}\r\n                        {multiplier.toFixed(2) || \"1.00\"}x APY\r\n                    </Text>\r\n                    <Text caption={IS_DESKTOP} medium={true}>\r\n                        {formatPercentage(apy)}%\r\n                    </Text>\r\n                </View>\r\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\r\n            </FlexView>\r\n        </Selectable>\r\n    );\r\n};\r\n\r\nconst Deposit = ({ state }: { state: FarmingState }) => {\r\n    const t = useTranslation();\r\n    if (!state.selectedLPToken) {\r\n        return <Heading text={t(\"amount\")} disabled={true} />;\r\n    }\r\n    return (\r\n        <View>\r\n            <Heading text={state.selectedLPToken.symbol + \" \" + t(\"amount\")} />\r\n            {state.selectedLPToken.balance.isZero() ? (\r\n                <AddLiquidityNotice state={state} />\r\n            ) : (\r\n                <TokenInput\r\n                    token={state.selectedLPToken}\r\n                    amount={state.amount}\r\n                    onAmountChanged={state.setAmount}\r\n                    autoFocus={IS_DESKTOP}\r\n                />\r\n            )}\r\n        </View>\r\n    );\r\n};\r\n\r\nconst AddLiquidityNotice = ({ state }: { state: FarmingState }) => {\r\n    const t = useTranslation();\r\n    const { green } = useColors();\r\n    const onPress = useLinker(\"/liquidity\", \"Liquidity\");\r\n    return (\r\n        <>\r\n            <Notice\r\n                color={green}\r\n                text={t(\"tokens-needed-for-farming-notice\", { symbol: state.selectedLPToken!.symbol })}\r\n            />\r\n            <Button\r\n                color={green}\r\n                title={t(\"add-liquidity\")}\r\n                containerStyle={{ marginTop: Spacing.normal }}\r\n                onPress={onPress}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nconst DepositInfo = ({ state }: { state: FarmingState }) => {\r\n    const t = useTranslation();\r\n    const disabled = isEmptyValue(state.amount) || !state.selectedLPToken?.sushiRewardedPerYear;\r\n    const sushiPerYear = disabled\r\n        ? 0\r\n        : parseBalance(state.amount)\r\n              .mul(state.selectedLPToken!.sushiRewardedPerYear!)\r\n              .div(pow10(18));\r\n    return (\r\n        <InfoBox>\r\n            <AmountMeta amount={formatBalance(sushiPerYear, 18, 8)} suffix={t(\"sushi-per-year\")} disabled={disabled} />\r\n            <Meta\r\n                label={t(\"my-balance\")}\r\n                text={formatBalance(state.selectedLPToken?.balance || 0)}\r\n                disabled={!state.selectedLPToken}\r\n            />\r\n            <Meta\r\n                label={t(\"total-value-locked\")}\r\n                text={formatUSD(state.selectedLPToken?.totalValueUSD || 0)}\r\n                disabled={!state.selectedLPToken}\r\n            />\r\n            <Meta\r\n                label={t(\"annual-percentage-yield\")}\r\n                text={formatPercentage(state.selectedLPToken?.apy || 0)}\r\n                suffix={\"%\"}\r\n                disabled={!state.selectedLPToken}\r\n            />\r\n            <DepositControls state={state} />\r\n        </InfoBox>\r\n    );\r\n};\r\n\r\nconst DepositControls = ({ state }: { state: FarmingState }) => {\r\n    const [error, setError] = useState<MetamaskError>({});\r\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\r\n    const approveRequired = !state.selectedLPTokenAllowed;\r\n    const disabled = approveRequired || isEmptyValue(state.amount);\r\n    return (\r\n        <View style={{ marginTop: Spacing.normal }}>\r\n            {!state.selectedLPToken || state.selectedLPToken.balance.isZero() ? (\r\n                <DepositButton state={state} onError={setError} disabled={true} />\r\n            ) : parseBalance(state.amount, state.selectedLPToken!.decimals).gt(state.selectedLPToken!.balance) ? (\r\n                <InsufficientBalanceButton symbol={state.selectedLPToken!.symbol} />\r\n            ) : state.loading ? (\r\n                <FetchingButton />\r\n            ) : (\r\n                <>\r\n                    <ApproveButton\r\n                        token={state.selectedLPToken!}\r\n                        spender={MASTER_CHEF}\r\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\r\n                        onError={setError}\r\n                        hidden={isEmptyValue(state.amount) || !approveRequired}\r\n                    />\r\n                    <DepositButton state={state} onError={setError} disabled={disabled} />\r\n                </>\r\n            )}\r\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\r\n        </View>\r\n    );\r\n};\r\n\r\nconst DepositButton = ({\r\n    state,\r\n    onError,\r\n    disabled\r\n}: {\r\n    state: FarmingState;\r\n    onError: (e) => void;\r\n    disabled: boolean;\r\n}) => {\r\n    const t = useTranslation();\r\n    const onPress = useCallback(() => {\r\n        onError({});\r\n        state.onDeposit().catch(onError);\r\n    }, [state.onDeposit, onError]);\r\n    return <Button title={t(\"deposit\")} disabled={disabled} loading={state.depositing} onPress={onPress} />;\r\n};\r\n\r\nexport default FarmingScreen;\r\n"],"sourceRoot":""}