{"version":3,"sources":["src/components/AmountMeta.tsx","src/components/LPTokenSelect.tsx","src/hooks/useLPTokensState.tsx","src/hooks/useMasterChef.tsx","src/hooks/useFarmingState.tsx","src/screens/HarvestScreen.tsx"],"names":["AmountMeta","props","t","useTranslation","useColors","textDark","textLight","placeholder","style","fontSize","IS_DESKTOP","marginBottom","Spacing","normal","color","disabled","amount","suffix","LPTokenList","state","emptyText","Item","renderItem","useCallback","item","key","symbol","token","selected","onSelectToken","setSelectedLPToken","data","lpTokens","sort","p1","p2","m1","multiplier","m2","apy","loading","length","EmptyList","text","keyExtractor","margin","textAlign","width","LPTokenItem","textMedium","balance","formatBalance","decimals","onPress","containerStyle","ITEM_SEPARATOR_HEIGHT","alignItems","tokenA","small","replaceWETH","tokenB","marginLeft","medium","caption","tiny","flex","light","LPTokenSelect","title","expanded","selectedLPToken","onExpand","updatingLPTokens","useLPTokensState","mode","useTokenPairState","useContext","EthersContext","provider","address","tokens","useState","lastTimeRefreshed","setLastTimeRefreshed","setLoading","setLPTokens","selectedLPTokenAllowed","setSelectedLPTokenAllowed","pair","setPair","setAmount","getPair","useSDK","updateLPTokens","a","async","fetchMyPools","fetchPools","fetchMyLPTokens","fetchMyUniswapLPTokens","useEffect","useAsyncEffect","undefined","useDelayedOnBlockEffect","block","fromToken","toToken","updateLastTimeRefreshed","Date","now","useMasterChef","deposit","lpTokenId","signer","masterChef","getContract","MASTER_CHEF","estimateGas","gasLimit","mul","div","tx","logTransaction","toString","withdraw","useFarmingState","myPools","getTokenAllowance","depositing","setDepositing","withdrawing","setWithdrawing","setFromAmount","setToAmount","minAllowance","ethers","BigNumber","from","pow","sub","allowance","gte","totalSupply","amountDeposited","lpToken","convertToken","TokenAmount","lpTokenAmount","tokenAAmount","involvesToken","getLiquidityValue","toFixed","tokenBAmount","onDeposit","id","parseBalance","wait","onWithdraw","Harvest","chainId","marginTop","large","TokenItem","Withdraw","WithdrawInfo","marginRight","onAmountChanged","autoFocus","total","sushi","lte","pendingSushi","label1","label2","isEmptyValue","label","fromAmount","toAmount","WithdrawControls","error","setError","isZero","WithdrawButton","onError","gt","message","code","catch","HarvestScreen","Platform","OS"],"mappings":"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","file":"static/js/14.12feb9f3.chunk.js","sourcesContent":["import React, { FC } from \"react\";\r\n\r\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\r\nimport useColors from \"../hooks/useColors\";\r\nimport useTranslation from \"../hooks/useTranslation\";\r\nimport Text from \"./Text\";\r\n\r\nexport interface AmountMetaProps {\r\n    amount?: string;\r\n    suffix?: string;\r\n    disabled?: boolean;\r\n}\r\n\r\nconst AmountMeta: FC<AmountMetaProps> = props => {\r\n    const t = useTranslation();\r\n    const { textDark, textLight, placeholder } = useColors();\r\n    return (\r\n        <Text\r\n            style={{\r\n                fontSize: IS_DESKTOP ? 28 : 20,\r\n                marginBottom: Spacing.normal,\r\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\r\n            }}>\r\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\r\n        </Text>\r\n    );\r\n};\r\n\r\nexport default AmountMeta;\r\n","import React, { FC, useCallback } from \"react\";\r\nimport { FlatList, View, ViewStyle } from \"react-native\";\r\n\r\nimport { Spacing } from \"../constants/dimension\";\r\nimport useColors from \"../hooks/useColors\";\r\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\r\nimport LPToken from \"../types/LPToken\";\r\nimport { formatBalance } from \"../utils\";\r\nimport CloseIcon from \"./CloseIcon\";\r\nimport Expandable from \"./Expandable\";\r\nimport FlexView from \"./FlexView\";\r\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\r\nimport Loading from \"./Loading\";\r\nimport Selectable from \"./Selectable\";\r\nimport SelectIcon from \"./SelectIcon\";\r\nimport Text from \"./Text\";\r\nimport TokenLogo from \"./TokenLogo\";\r\n\r\nexport type LPTokenSelectFilter = \"balance\" | \"amountDeposited\" | \"\";\r\n\r\nexport interface LPTokenSelectProps {\r\n    state: LPTokensState;\r\n    title: string;\r\n    emptyText: string;\r\n    Item: FC<LPTokenItemProps>;\r\n    style?: ViewStyle;\r\n}\r\n\r\nexport interface LPTokenItemProps {\r\n    token: LPToken;\r\n    selected: boolean;\r\n    onSelectToken: (token: LPToken) => void;\r\n}\r\n\r\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\r\n    const onUnselectToken = () => props.state.setSelectedLPToken();\r\n    return (\r\n        <View style={props.style}>\r\n            <Expandable\r\n                title={props.title}\r\n                expanded={!props.state.selectedLPToken}\r\n                onExpand={() => props.state.setSelectedLPToken()}>\r\n                <LPTokenList state={props.state} emptyText={props.emptyText} Item={props.Item} />\r\n            </Expandable>\r\n            {props.state.selectedLPToken && (\r\n                <props.Item token={props.state.selectedLPToken} selected={true} onSelectToken={onUnselectToken} />\r\n            )}\r\n        </View>\r\n    );\r\n};\r\n\r\n// tslint:disable-next-line:max-func-body-length\r\nconst LPTokenList = ({\r\n    state,\r\n    emptyText,\r\n    Item\r\n}: {\r\n    state: LPTokensState;\r\n    emptyText: string;\r\n    Item: FC<LPTokenItemProps>;\r\n}) => {\r\n    const renderItem = useCallback(\r\n        ({ item }) => {\r\n            return <Item key={item.symbol} token={item} selected={false} onSelectToken={state.setSelectedLPToken} />;\r\n        },\r\n        [state.setSelectedLPToken]\r\n    );\r\n    const data = state.lpTokens.sort((p1, p2) => {\r\n        const m1 = p1.multiplier || 0;\r\n        const m2 = p2.multiplier || 0;\r\n        return m1 === m2 ? (p2.apy || 0) - (p1.apy || 0) : m2 - m1;\r\n    });\r\n    return state.loading ? (\r\n        <Loading />\r\n    ) : data.length === 0 ? (\r\n        <EmptyList text={emptyText} />\r\n    ) : (\r\n        <FlatList keyExtractor={item => item.symbol} data={data} renderItem={renderItem} />\r\n    );\r\n};\r\n\r\nconst EmptyList = ({ text }: { text: string }) => {\r\n    return (\r\n        <View style={{ margin: Spacing.normal }}>\r\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\r\n                {text}\r\n            </Text>\r\n        </View>\r\n    );\r\n};\r\n\r\nexport const LPTokenItem: FC<LPTokenItemProps> = props => {\r\n    const { textMedium } = useColors();\r\n    const balance = formatBalance(props.token.balance, props.token.decimals, 6);\r\n    const onPress = useCallback(() => {\r\n        props.onSelectToken(props.token);\r\n    }, [props.onSelectToken, props.token]);\r\n    return (\r\n        <Selectable\r\n            selected={props.selected}\r\n            onPress={onPress}\r\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\r\n            <FlexView style={{ alignItems: \"center\" }}>\r\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\r\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\r\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\r\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\r\n                </Text>\r\n                <View style={{ flex: 1, marginLeft: Spacing.tiny }}>\r\n                    <Text caption={true} light={true} style={{ textAlign: \"right\", color: textMedium }}>\r\n                        {balance}\r\n                    </Text>\r\n                </View>\r\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\r\n            </FlexView>\r\n        </Selectable>\r\n    );\r\n};\r\n\r\nexport default LPTokenSelect;\r\n","import { useContext, useEffect, useState } from \"react\";\r\n\r\nimport { Pair } from \"@sushiswap/sdk\";\r\nimport useAsyncEffect from \"use-async-effect\";\r\nimport { EthersContext } from \"../context/EthersContext\";\r\nimport LPToken from \"../types/LPToken\";\r\nimport { fetchMyLPTokens, fetchMyPools, fetchMyUniswapLPTokens, fetchPools } from \"../utils/fetch-utils\";\r\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\r\nimport useSDK from \"./useSDK\";\r\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\r\n\r\nexport interface LPTokensState extends TokenPairState {\r\n    updateLPTokens: () => Promise<void>;\r\n    lastTimeRefreshed: number;\r\n    updateLastTimeRefreshed: () => void;\r\n    lpTokens: LPToken[];\r\n    selectedLPToken?: LPToken;\r\n    setSelectedLPToken: (token?: LPToken) => void;\r\n    selectedLPTokenAllowed: boolean;\r\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\r\n    pair?: Pair;\r\n    amount: string;\r\n    setAmount: (amount: string) => void;\r\n}\r\n\r\ntype Mode = \"pools\" | \"my-pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\r\n\r\nlet updatingLPTokens = false;\r\n\r\n// tslint:disable-next-line:max-func-body-length\r\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\r\n    const state = useTokenPairState();\r\n    const { provider, address, tokens } = useContext(EthersContext);\r\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\r\n    const [loading, setLoading] = useState(true);\r\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\r\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\r\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\r\n    const [pair, setPair] = useState<Pair>();\r\n    const [amount, setAmount] = useState(\"\");\r\n    const { getPair } = useSDK();\r\n\r\n    const updateLPTokens = async () => {\r\n        if (address && provider && tokens.length > 0 && !updatingLPTokens) {\r\n            try {\r\n                updatingLPTokens = true;\r\n                const data = await (mode === \"my-pools\"\r\n                    ? fetchMyPools(address, tokens, provider)\r\n                    : mode === \"pools\"\r\n                    ? fetchPools(address, tokens, provider)\r\n                    : mode === \"my-lp-tokens\"\r\n                    ? fetchMyLPTokens(address, tokens, provider)\r\n                    : fetchMyUniswapLPTokens(address, tokens, provider));\r\n                if (data) {\r\n                    setLPTokens(data);\r\n                }\r\n            } finally {\r\n                updatingLPTokens = false;\r\n                setLoading(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!selectedLPToken) {\r\n            setAmount(\"\");\r\n        }\r\n    }, [selectedLPToken]);\r\n\r\n    useAsyncEffect(async () => {\r\n        setLoading(true);\r\n        setPair(undefined);\r\n        if (selectedLPToken && provider) {\r\n            try {\r\n                setPair(await getPair(selectedLPToken.tokenA, selectedLPToken.tokenB, provider));\r\n            } catch (e) {\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        } else {\r\n            setLoading(false);\r\n        }\r\n    }, [selectedLPToken, provider]);\r\n\r\n    useDelayedOnBlockEffect(\r\n        async block => {\r\n            if (address && (mode === \"pools\" || tokens.length > 0)) {\r\n                if (!block) {\r\n                    setLoading(true);\r\n                }\r\n                await updateLPTokens();\r\n            }\r\n        },\r\n        () => \"updateLPTokens()\",\r\n        [tokens.length, address, lastTimeRefreshed],\r\n        0\r\n    );\r\n\r\n    return {\r\n        ...state,\r\n        fromToken: state.fromToken || selectedLPToken?.tokenA,\r\n        toToken: state.toToken || selectedLPToken?.tokenB,\r\n        updateLPTokens,\r\n        loading: state.loading || loading,\r\n        lastTimeRefreshed,\r\n        updateLastTimeRefreshed: () => {\r\n            setLastTimeRefreshed(Date.now());\r\n        },\r\n        lpTokens,\r\n        selectedLPToken,\r\n        setSelectedLPToken,\r\n        selectedLPTokenAllowed,\r\n        setSelectedLPTokenAllowed,\r\n        pair,\r\n        amount,\r\n        setAmount\r\n    };\r\n};\r\n\r\nexport default useLPTokensState;\r\n","import { useCallback } from \"react\";\r\n\r\nimport { ethers } from \"ethers\";\r\nimport { MASTER_CHEF } from \"../constants/contracts\";\r\nimport { getContract } from \"../utils\";\r\nimport { logTransaction } from \"../utils/analytics-utils\";\r\n\r\nconst useMasterChef = () => {\r\n    const deposit = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\r\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\r\n        const gasLimit = await masterChef.estimateGas.deposit(lpTokenId, amount);\r\n        const tx = await masterChef.deposit(lpTokenId, amount, {\r\n            gasLimit: gasLimit.mul(120).div(100)\r\n        });\r\n        return logTransaction(tx, \"MasterChef.deposit()\", lpTokenId, amount.toString());\r\n    }, []);\r\n\r\n    const withdraw = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\r\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\r\n        const gasLimit = await masterChef.estimateGas.withdraw(lpTokenId, amount);\r\n        const tx = await masterChef.withdraw(lpTokenId, amount, {\r\n            gasLimit: gasLimit.mul(120).div(100)\r\n        });\r\n        return logTransaction(tx, \"MasterChef.withdraw()\", lpTokenId, amount.toString());\r\n    }, []);\r\n\r\n    return {\r\n        deposit,\r\n        withdraw\r\n    };\r\n};\r\n\r\nexport default useMasterChef;\r\n","import { useCallback, useContext, useEffect, useState } from \"react\";\r\n\r\nimport { TokenAmount } from \"@sushiswap/sdk\";\r\nimport { ethers } from \"ethers\";\r\nimport useAsyncEffect from \"use-async-effect\";\r\nimport { MASTER_CHEF } from \"../constants/contracts\";\r\nimport { EthersContext } from \"../context/EthersContext\";\r\nimport { convertToken, parseBalance } from \"../utils\";\r\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\r\nimport useMasterChef from \"./useMasterChef\";\r\n\r\nexport interface FarmingState extends LPTokensState {\r\n    onDeposit: () => Promise<void>;\r\n    depositing: boolean;\r\n    onWithdraw: () => Promise<void>;\r\n    withdrawing: boolean;\r\n}\r\n\r\n// tslint:disable-next-line:max-func-body-length\r\nconst useFarmingState: (myPools: boolean) => FarmingState = myPools => {\r\n    const state = useLPTokensState(myPools ? \"my-pools\" : \"pools\");\r\n    const { signer, getTokenAllowance } = useContext(EthersContext);\r\n    const { deposit, withdraw } = useMasterChef();\r\n    const [loading, setLoading] = useState(false);\r\n    const [depositing, setDepositing] = useState(false);\r\n    const [withdrawing, setWithdrawing] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setLoading(false);\r\n        setDepositing(false);\r\n        setWithdrawing(false);\r\n        state.setFromAmount(\"\");\r\n        state.setToAmount(\"\");\r\n    }, [state.selectedLPToken]);\r\n\r\n    useAsyncEffect(async () => {\r\n        if (signer && state.selectedLPToken) {\r\n            setLoading(true);\r\n            state.setSelectedLPTokenAllowed(false);\r\n            try {\r\n                const minAllowance = ethers.BigNumber.from(2)\r\n                    .pow(96)\r\n                    .sub(1);\r\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MASTER_CHEF);\r\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n    }, [signer, state.selectedLPToken]);\r\n\r\n    useAsyncEffect(() => {\r\n        if (\r\n            state.pair &&\r\n            state.selectedLPToken &&\r\n            state.selectedLPToken.totalSupply &&\r\n            state.selectedLPToken.amountDeposited\r\n        ) {\r\n            const lpToken = convertToken(state.selectedLPToken);\r\n            const tokenA = convertToken(state.selectedLPToken.tokenA);\r\n            const tokenB = convertToken(state.selectedLPToken.tokenB);\r\n            const totalSupply = new TokenAmount(lpToken, state.selectedLPToken.totalSupply.toString());\r\n            const lpTokenAmount = new TokenAmount(lpToken, state.selectedLPToken.amountDeposited.toString());\r\n            const tokenAAmount = state.pair.involvesToken(tokenA)\r\n                ? state.pair.getLiquidityValue(tokenA, totalSupply, lpTokenAmount)\r\n                : null;\r\n            state.setFromAmount(tokenAAmount?.toFixed() || \"\");\r\n            const tokenBAmount = state.pair.involvesToken(tokenA)\r\n                ? state.pair.getLiquidityValue(tokenB, totalSupply, lpTokenAmount)\r\n                : null;\r\n            state.setToAmount(tokenBAmount?.toFixed() || \"\");\r\n        }\r\n    }, [state.pair, state.selectedLPToken]);\r\n\r\n    const onDeposit = useCallback(async () => {\r\n        if (state.selectedLPToken?.id && state.amount && signer) {\r\n            setDepositing(true);\r\n            try {\r\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\r\n                const tx = await deposit(state.selectedLPToken.id, amount, signer);\r\n                await tx.wait();\r\n                state.setSelectedLPToken(undefined);\r\n                await state.updateLastTimeRefreshed();\r\n            } finally {\r\n                setDepositing(false);\r\n            }\r\n        }\r\n    }, [state.selectedLPToken, state.amount, signer]);\r\n\r\n    const onWithdraw = useCallback(async () => {\r\n        if (state.selectedLPToken?.id && state.amount && signer) {\r\n            setWithdrawing(true);\r\n            try {\r\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\r\n                const tx = await withdraw(state.selectedLPToken.id, amount, signer);\r\n                await tx.wait();\r\n                state.setSelectedLPToken(undefined);\r\n                await state.updateLastTimeRefreshed();\r\n            } finally {\r\n                setWithdrawing(false);\r\n            }\r\n        }\r\n    }, [state.selectedLPToken, state.amount, signer]);\r\n\r\n    return {\r\n        ...state,\r\n        loading: state.loading || loading,\r\n        onDeposit,\r\n        depositing,\r\n        onWithdraw,\r\n        withdrawing\r\n    };\r\n};\r\n\r\nexport default useFarmingState;\r\n","import React, { FC, useCallback, useContext, useState } from \"react\";\r\nimport { Platform, View } from \"react-native\";\r\n\r\nimport useAsyncEffect from \"use-async-effect\";\r\nimport AmountMeta from \"../components/AmountMeta\";\r\nimport BackgroundImage from \"../components/BackgroundImage\";\r\nimport Border from \"../components/Border\";\r\nimport Button from \"../components/Button\";\r\nimport ChangeNetwork from \"../components/ChangeNetwork\";\r\nimport CloseIcon from \"../components/CloseIcon\";\r\nimport Container from \"../components/Container\";\r\nimport Content from \"../components/Content\";\r\nimport ErrorMessage from \"../components/ErrorMessage\";\r\nimport FetchingButton from \"../components/FetchingButton\";\r\nimport FlexView from \"../components/FlexView\";\r\nimport Heading from \"../components/Heading\";\r\nimport InfoBox from \"../components/InfoBox\";\r\nimport { ITEM_SEPARATOR_HEIGHT } from \"../components/ItemSeparator\";\r\nimport LPTokenSelect, { LPTokenItemProps } from \"../components/LPTokenSelect\";\r\nimport Meta from \"../components/Meta\";\r\nimport Selectable from \"../components/Selectable\";\r\nimport SelectIcon from \"../components/SelectIcon\";\r\nimport Text from \"../components/Text\";\r\nimport Title from \"../components/Title\";\r\nimport TokenInput from \"../components/TokenInput\";\r\nimport TokenLogo from \"../components/TokenLogo\";\r\nimport WebFooter from \"../components/web/WebFooter\";\r\nimport { FarmingSubMenu } from \"../components/web/WebSubMenu\";\r\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\r\nimport { EthersContext } from \"../context/EthersContext\";\r\nimport useFarmingState, { FarmingState } from \"../hooks/useFarmingState\";\r\nimport useTranslation from \"../hooks/useTranslation\";\r\nimport MetamaskError from \"../types/MetamaskError\";\r\nimport Token from \"../types/Token\";\r\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\r\nimport Screen from \"./Screen\";\r\n\r\nconst HarvestScreen = () => {\r\n    const t = useTranslation();\r\n    return (\r\n        <Screen>\r\n            <Container>\r\n                <BackgroundImage />\r\n                <Content>\r\n                    <Title text={t(\"harvest-sushi\")} />\r\n                    <Text light={true}>{t(\"harvest-sushi-desc\")}</Text>\r\n                    <Harvest />\r\n                </Content>\r\n                {Platform.OS === \"web\" && <WebFooter />}\r\n            </Container>\r\n            <FarmingSubMenu />\r\n        </Screen>\r\n    );\r\n};\r\n\r\nconst Harvest = () => {\r\n    const { chainId } = useContext(EthersContext);\r\n    const t = useTranslation();\r\n    const state = useFarmingState(true);\r\n    if (chainId !== 1) return <ChangeNetwork />;\r\n    return (\r\n        <View style={{ marginTop: Spacing.large }}>\r\n            <LPTokenSelect\r\n                state={state}\r\n                title={\"My Farms\"}\r\n                emptyText={t(\"you-dont-have-lp-tokens-deposited\")}\r\n                Item={TokenItem}\r\n            />\r\n            <Border />\r\n            <Withdraw state={state} />\r\n            <WithdrawInfo state={state} />\r\n        </View>\r\n    );\r\n};\r\n\r\n// tslint:disable-next-line:max-func-body-length\r\nconst TokenItem: FC<LPTokenItemProps> = props => {\r\n    const amount = formatBalance(props.token?.amountDeposited || 0, props.token.decimals, 8);\r\n    const onPress = useCallback(() => {\r\n        props.onSelectToken(props.token);\r\n    }, [props.onSelectToken, props.token]);\r\n    return (\r\n        <Selectable\r\n            selected={props.selected}\r\n            onPress={onPress}\r\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\r\n            <FlexView style={{ alignItems: \"center\" }}>\r\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\r\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\r\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\r\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\r\n                </Text>\r\n                <Text caption={IS_DESKTOP} medium={true} style={{ flex: 1, textAlign: \"right\", marginRight: 4 }}>\r\n                    {amount}\r\n                </Text>\r\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\r\n            </FlexView>\r\n        </Selectable>\r\n    );\r\n};\r\n\r\nconst Withdraw = ({ state }: { state: FarmingState }) => {\r\n    const t = useTranslation();\r\n    if (!state.selectedLPToken) {\r\n        return <Heading text={t(\"amount\")} disabled={true} />;\r\n    }\r\n    // This enables MAX button\r\n    const token = {\r\n        ...state.selectedLPToken,\r\n        balance: state.selectedLPToken.amountDeposited\r\n    } as Token;\r\n    return (\r\n        <View>\r\n            <Heading text={state.selectedLPToken.symbol + \" \" + t(\"amount\")} />\r\n            <TokenInput token={token} amount={state.amount} onAmountChanged={state.setAmount} autoFocus={IS_DESKTOP} />\r\n        </View>\r\n    );\r\n};\r\n\r\nconst WithdrawInfo = ({ state }: { state: FarmingState }) => {\r\n    const t = useTranslation();\r\n    const amount = parseBalance(state.amount);\r\n    const total = state.selectedLPToken?.amountDeposited;\r\n    const sushi = total && amount.lte(total) ? state.selectedLPToken!.pendingSushi?.mul(amount).div(total) : null;\r\n    const disabled = !state.pair || !state.selectedLPToken;\r\n    const label1 = state.selectedLPToken\r\n        ? t(\"deposited-\", { symbol: state.selectedLPToken.tokenA.symbol })\r\n        : t(\"deposited-token-1\");\r\n    const label2 = state.selectedLPToken\r\n        ? t(\"deposited-\", { symbol: state.selectedLPToken.tokenB.symbol })\r\n        : t(\"deposited-token-2\");\r\n    return (\r\n        <InfoBox>\r\n            <AmountMeta\r\n                amount={sushi ? formatBalance(sushi) : \"\"}\r\n                suffix={\"SUSHI\"}\r\n                disabled={disabled || isEmptyValue(state.amount)}\r\n            />\r\n            <Meta label={t(\"deposited-lp-token\")} text={total ? formatBalance(total) : \"\"} disabled={disabled} />\r\n            <Meta label={label1} text={state.fromAmount} disabled={disabled} />\r\n            <Meta label={label2} text={state.toAmount} disabled={disabled} />\r\n            <WithdrawControls state={state} />\r\n        </InfoBox>\r\n    );\r\n};\r\n\r\nconst WithdrawControls = ({ state }: { state: FarmingState }) => {\r\n    const t = useTranslation();\r\n    const [error, setError] = useState<MetamaskError>({});\r\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\r\n    const disabled = isEmptyValue(state.amount);\r\n    return (\r\n        <View style={{ marginTop: Spacing.normal }}>\r\n            {!state.selectedLPToken || state.selectedLPToken.amountDeposited?.isZero() ? (\r\n                <WithdrawButton state={state} onError={setError} disabled={true} />\r\n            ) : parseBalance(state.amount, state.selectedLPToken!.decimals).gt(\r\n                  state.selectedLPToken!.amountDeposited!\r\n              ) ? (\r\n                <Button title={t(\"insufficient-amount\")} disabled={true} />\r\n            ) : state.loading ? (\r\n                <FetchingButton />\r\n            ) : (\r\n                <WithdrawButton state={state} onError={setError} disabled={disabled} />\r\n            )}\r\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\r\n        </View>\r\n    );\r\n};\r\n\r\nconst WithdrawButton = ({\r\n    state,\r\n    onError,\r\n    disabled\r\n}: {\r\n    state: FarmingState;\r\n    onError: (e) => void;\r\n    disabled: boolean;\r\n}) => {\r\n    const t = useTranslation();\r\n    const onPress = useCallback(() => {\r\n        onError({});\r\n        state.onWithdraw().catch(onError);\r\n    }, [state.onWithdraw, onError]);\r\n    return <Button title={t(\"withdraw\")} disabled={disabled} loading={state.withdrawing} onPress={onPress} />;\r\n};\r\n\r\nexport default HarvestScreen;\r\n"],"sourceRoot":""}