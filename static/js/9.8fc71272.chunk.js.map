{"version":3,"sources":["src/components/Heading.tsx","src/components/AmountMeta.tsx","src/components/InsufficientBalanceButton.tsx","src/components/Border.tsx","src/components/ChangeNetwork.tsx","src/components/ErrorMessage.tsx","src/components/InfoBox.tsx","src/components/FetchingButton.tsx","src/components/TokenInput.tsx","src/components/Notice.tsx","src/components/Input.tsx","src/hooks/useSushiBar.tsx","src/hooks/useStakingState.tsx","src/screens/UnstakeScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","AmountMeta","t","useTranslation","textDark","textLight","placeholder","normal","amount","suffix","InsufficientBalanceButton","symbol","Border","border","width","backgroundColor","marginTop","ChangeNetwork","chainId","networkName","1","42","justifyContent","light","textAlign","marginVertical","large","ErrorMessage","error","borderColor","borderWidth","padding","code","note","message","InfoBox","darkMode","useContext","GlobalContext","backgroundLight","borderDark","useStyles","FetchingButton","MaxButton","onPressMax","useCallback","token","balance","isETH","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","Platform","OS","maxButtonText","TokenInput","onChangeText","onAmountChanged","parseBalance","e","endsWith","indexOf","length","label","value","keyboardType","autoFocus","inputStyle","marginHorizontal","inputContainerStyle","borderBottomWidth","labelStyle","fontFamily","containerStyle","paddingTop","hideMaxButton","Notice","borderStyle","clear","titleStyle","paddingVertical","alignSelf","Input","textMedium","onError","errors","forbidden","forEach","validation","match","regexp","push","allowed","join","minHeight","outline","placeholderTextColor","errorStyle","useSushiBar","enter","signer","a","async","sushiBar","getContract","SUSHI_BAR","estimateGas","gasLimit","mul","div","tx","logTransaction","toString","leave","useStakingState","EthersContext","address","getTokenAllowance","tokens","updateTokens","useState","sushiStaked","setSushiStaked","sushiSupply","setSushiSupply","xSushiSupply","setXSushiSupply","setAmount","sushiAllowed","setSushiAllowed","xSushiAllowed","setXSushiAllowed","loading","setLoading","entering","setEntering","leaving","setLeaving","sushi","useMemo","find","xSushi","useEffect","useAsyncEffect","minAllowance","BigNumber","from","pow","sushiAllowance","gte","xSushiAllowance","sushiContract","balanceOf","totalSupply","xSushiContract","onEnter","parsed","wait","onLeave","Staking","state","XSushiBalance","AmountInput","isZero","UnstakeInfo","isEmptyValue","sushiAmount","undefined","Controls","setError","UnstakeButton","UnstakeScreen"],"mappings":"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","file":"static/js/9.8fc71272.chunk.js","sourcesContent":["import React, { FC } from \"react\";\r\nimport { TextStyle } from \"react-native\";\r\n\r\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\r\nimport useColors from \"../hooks/useColors\";\r\nimport Button from \"./Button\";\r\nimport FlexView from \"./FlexView\";\r\nimport Text from \"./Text\";\r\n\r\ninterface HeadingProps {\r\n    text: string;\r\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\r\n    disabled?: boolean;\r\n    buttonText?: string;\r\n    onPressButton?: () => void | Promise<void>;\r\n    style?: TextStyle;\r\n}\r\n\r\nconst Heading: FC<HeadingProps> = props => {\r\n    const { accent } = useColors();\r\n    return (\r\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\r\n            <Text\r\n                medium={true}\r\n                fontWeight={props.fontWeight || \"bold\"}\r\n                disabled={props.disabled}\r\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\r\n                {props.text}\r\n            </Text>\r\n            {props.buttonText && (\r\n                <Button\r\n                    type={\"clear\"}\r\n                    size={\"small\"}\r\n                    title={props.buttonText}\r\n                    onPress={props.onPressButton}\r\n                    color={accent}\r\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\r\n                />\r\n            )}\r\n        </FlexView>\r\n    );\r\n};\r\n\r\nexport default Heading;\r\n","import React, { FC } from \"react\";\r\n\r\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\r\nimport useColors from \"../hooks/useColors\";\r\nimport useTranslation from \"../hooks/useTranslation\";\r\nimport Text from \"./Text\";\r\n\r\nexport interface AmountMetaProps {\r\n    amount?: string;\r\n    suffix?: string;\r\n    disabled?: boolean;\r\n}\r\n\r\nconst AmountMeta: FC<AmountMetaProps> = props => {\r\n    const t = useTranslation();\r\n    const { textDark, textLight, placeholder } = useColors();\r\n    return (\r\n        <Text\r\n            style={{\r\n                fontSize: IS_DESKTOP ? 28 : 20,\r\n                marginBottom: Spacing.normal,\r\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\r\n            }}>\r\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\r\n        </Text>\r\n    );\r\n};\r\n\r\nexport default AmountMeta;\r\n","import React from \"react\";\r\n\r\nimport useTranslation from \"../hooks/useTranslation\";\r\nimport Button from \"./Button\";\r\n\r\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\r\n    const t = useTranslation();\r\n    return <Button title={symbol ? t(\"insufficient-\", { symbol }) : t(\"insufficient-balance\")} disabled={true} />;\r\n};\r\nexport default InsufficientBalanceButton;\r\n","import React from \"react\";\r\nimport { View } from \"react-native\";\r\n\r\nimport { Spacing } from \"../constants/dimension\";\r\nimport useColors from \"../hooks/useColors\";\r\n\r\nconst Border = props => {\r\n    const { border } = useColors();\r\n    return (\r\n        <View\r\n            style={{\r\n                height: 1,\r\n                width: \"100%\",\r\n                backgroundColor: border,\r\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\r\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Border;\r\n","import React from \"react\";\r\nimport { View } from \"react-native\";\r\n\r\nimport { Spacing } from \"../constants/dimension\";\r\nimport useTranslation from \"../hooks/useTranslation\";\r\nimport Text from \"./Text\";\r\n\r\nconst ChangeNetwork = ({ chainId = 1 }) => {\r\n    const t = useTranslation();\r\n    const networkName = {\r\n        1: \"Mainnet\",\r\n        42: \"Kovan\"\r\n    }[chainId];\r\n    return (\r\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n            <Text light={true} style={{ textAlign: \"center\", marginVertical: Spacing.large }}>\r\n                {t(\"change-network-to\", { networkName })}\r\n            </Text>\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default ChangeNetwork;\r\n","import React from \"react\";\r\nimport { View } from \"react-native\";\r\n\r\nimport { Spacing } from \"../constants/dimension\";\r\nimport MetamaskError from \"../types/MetamaskError\";\r\nimport Text from \"./Text\";\r\n\r\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\r\n    <View\r\n        style={{\r\n            borderColor: \"red\",\r\n            borderWidth: 1,\r\n            width: \"100%\",\r\n            padding: Spacing.tiny,\r\n            marginTop: Spacing.small\r\n        }}>\r\n        {error.code && (\r\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\r\n                Error Code {error.code}\r\n            </Text>\r\n        )}\r\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\r\n            {error.message}\r\n        </Text>\r\n    </View>\r\n);\r\n\r\nexport default ErrorMessage;\r\n","import React, { PropsWithChildren, useContext } from \"react\";\r\nimport { View, ViewProps } from \"react-native\";\r\n\r\nimport { Spacing } from \"../constants/dimension\";\r\nimport { GlobalContext } from \"../context/GlobalContext\";\r\nimport useColors from \"../hooks/useColors\";\r\nimport useStyles from \"../hooks/useStyles\";\r\n\r\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\r\n    const { darkMode } = useContext(GlobalContext);\r\n    const { backgroundLight, borderDark } = useColors();\r\n    const { border } = useStyles();\r\n    return (\r\n        <View\r\n            {...props}\r\n            style={[\r\n                {\r\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\r\n                    backgroundColor: backgroundLight,\r\n                    marginTop: Spacing.normal + Spacing.small,\r\n                    padding: Spacing.small + Spacing.tiny\r\n                },\r\n                props.style\r\n            ]}\r\n        />\r\n    );\r\n};\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\n\r\nimport useTranslation from \"../hooks/useTranslation\";\r\nimport Button from \"./Button\";\r\n\r\nconst FetchingButton = () => {\r\n    const t = useTranslation();\r\n    return <Button title={t(\"fetching\")} disabled={true} />;\r\n};\r\nexport default FetchingButton;\r\n","import React, { FC, useCallback } from \"react\";\r\nimport { Platform, View } from \"react-native\";\r\n\r\nimport { ethers } from \"ethers\";\r\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\r\nimport useColors from \"../hooks/useColors\";\r\nimport useStyles from \"../hooks/useStyles\";\r\nimport Token from \"../types/Token\";\r\nimport { formatBalance, isETH, parseBalance, pow10 } from \"../utils\";\r\nimport Button from \"./Button\";\r\nimport Heading from \"./Heading\";\r\nimport Input from \"./Input\";\r\n\r\nexport interface TokenInputProps {\r\n    title?: string;\r\n    token?: Token;\r\n    amount: string;\r\n    onAmountChanged: (amount: string) => void;\r\n    label?: string;\r\n    hideMaxButton?: boolean;\r\n    maxButtonText?: string;\r\n    autoFocus?: boolean;\r\n}\r\n\r\n// tslint:disable-next-line:max-func-body-length\r\nconst TokenInput: FC<TokenInputProps> = props => {\r\n    const { border } = useStyles();\r\n    const onChangeText = useCallback(\r\n        (text: string) => {\r\n            if (props.token && props.onAmountChanged) {\r\n                try {\r\n                    parseBalance(text, props.token.decimals);\r\n                    props.onAmountChanged(text);\r\n                } catch (e) {\r\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\r\n                        props.onAmountChanged(text);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        [props.token, props.onAmountChanged]\r\n    );\r\n    return (\r\n        <View>\r\n            {props.title && <Heading text={props.title} />}\r\n            <View>\r\n                <Input\r\n                    label={props.label}\r\n                    value={props.amount}\r\n                    onChangeText={onChangeText}\r\n                    placeholder={\"0.0\"}\r\n                    keyboardType={\"numeric\"}\r\n                    autoFocus={props.autoFocus || false}\r\n                    inputStyle={{ marginHorizontal: Spacing.tiny }}\r\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\r\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\r\n                    containerStyle={{\r\n                        ...border(),\r\n                        paddingHorizontal: Spacing.tiny,\r\n                        paddingTop: 15,\r\n                        paddingBottom: 2\r\n                    }}\r\n                />\r\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\r\n                    <MaxButton\r\n                        token={props.token}\r\n                        maxButtonText={props.maxButtonText}\r\n                        updateAmount={props.onAmountChanged}\r\n                    />\r\n                )}\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\r\n    const { accent } = useColors();\r\n    const onPressMax = useCallback(() => {\r\n        if (props.token) {\r\n            let balance = props.token.balance;\r\n            if (isETH(props.token)) {\r\n                // Subtract 0.01 ETH for gas fee\r\n                const fee = pow10(16);\r\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\r\n            }\r\n            props.updateAmount(formatBalance(balance, props.token.decimals));\r\n        }\r\n    }, [props.token, props.updateAmount]);\r\n    return (\r\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 12 : 24 }}>\r\n            <Button\r\n                type={\"clear\"}\r\n                size={\"small\"}\r\n                color={accent}\r\n                title={props.maxButtonText || (IS_DESKTOP ? \"MAX \" + props.token.symbol : \"MAX\")}\r\n                fontWeight={\"bold\"}\r\n                onPress={onPressMax}\r\n                buttonStyle={{ paddingHorizontal: Spacing.tiny }}\r\n            />\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default TokenInput;\r\n","import React from \"react\";\r\nimport { View, ViewStyle } from \"react-native\";\r\n\r\nimport { Spacing } from \"../constants/dimension\";\r\nimport useColors from \"../hooks/useColors\";\r\nimport useStyles from \"../hooks/useStyles\";\r\nimport Button from \"./Button\";\r\nimport Text from \"./Text\";\r\n\r\nexport interface NoticeProps {\r\n    text: string;\r\n    clear?: boolean;\r\n    color?: string;\r\n    buttonText?: string;\r\n    onPressButton?: () => void;\r\n    style?: ViewStyle;\r\n}\r\n\r\nconst Notice = (props: NoticeProps) => {\r\n    const { textLight } = useColors();\r\n    const { border } = useStyles();\r\n    const borderStyle = border({ color: props.color });\r\n    const color = props.color || textLight;\r\n    return (\r\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\r\n            <Text note={true} style={{ color }}>\r\n                {props.text}\r\n            </Text>\r\n            {props.buttonText && props.onPressButton && (\r\n                <Button\r\n                    title={props.buttonText}\r\n                    type={\"clear\"}\r\n                    size={\"small\"}\r\n                    fontWeight={\"bold\"}\r\n                    onPress={props.onPressButton}\r\n                    titleStyle={{ color }}\r\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\r\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\r\n                />\r\n            )}\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default Notice;\r\n","import React, { FC, useCallback } from \"react\";\r\nimport { Platform } from \"react-native\";\r\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\r\n\r\nimport useColors from \"../hooks/useColors\";\r\n\r\nexport interface Validation {\r\n    regexp: RegExp;\r\n    error: string;\r\n}\r\n\r\nexport interface InputProps extends NativeInputProps {\r\n    color?: string;\r\n    size?: \"small\" | \"normal\" | \"large\";\r\n    allowed?: Validation[];\r\n    forbidden?: Validation[];\r\n    onError?: (error: string) => void;\r\n}\r\n\r\n// tslint:disable-next-line:max-func-body-length\r\nconst Input: FC<InputProps> = props => {\r\n    const { textDark, textMedium, textLight } = useColors();\r\n    const size = props.size || \"normal\";\r\n    const color = props.color || textDark;\r\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\r\n    const onChangeText = useCallback(\r\n        (text: string) => {\r\n            props.onChangeText?.(text);\r\n            props.onError?.(\"\");\r\n            const errors = [] as string[];\r\n            if (text !== \"\" && props.forbidden) {\r\n                props.forbidden.forEach(validation => {\r\n                    if (text.match(validation.regexp)) {\r\n                        errors.push(validation.error);\r\n                    }\r\n                });\r\n            }\r\n            if (text !== \"\" && props.allowed) {\r\n                props.allowed.forEach(validation => {\r\n                    if (!text.match(validation.regexp)) {\r\n                        errors.push(validation.error);\r\n                    }\r\n                });\r\n            }\r\n            if (errors.length > 0) {\r\n                props.onError?.(errors.join(\"\\n\"));\r\n            }\r\n        },\r\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\r\n    );\r\n    return (\r\n        <NativeInput\r\n            {...props}\r\n            inputStyle={[\r\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\r\n                // @ts-ignore\r\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\r\n                props.inputStyle\r\n            ]}\r\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\r\n            placeholderTextColor={props.placeholderTextColor || textLight}\r\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\r\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\r\n            onChangeText={onChangeText}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Input;\r\n","import { useCallback } from \"react\";\r\n\r\nimport { ethers } from \"ethers\";\r\nimport { SUSHI_BAR } from \"../constants/contracts\";\r\nimport { getContract } from \"../utils\";\r\nimport { logTransaction } from \"../utils/analytics-utils\";\r\n\r\nconst useSushiBar = () => {\r\n    const enter = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\r\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\r\n        const gasLimit = await sushiBar.estimateGas.enter(amount);\r\n        const tx = await sushiBar.enter(amount, {\r\n            gasLimit: gasLimit.mul(120).div(100)\r\n        });\r\n        return logTransaction(tx, \"SushiBar.enter()\", amount.toString());\r\n    }, []);\r\n\r\n    const leave = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\r\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\r\n        const gasLimit = await sushiBar.estimateGas.leave(amount);\r\n        const tx = await sushiBar.leave(amount, {\r\n            gasLimit: gasLimit.mul(120).div(100)\r\n        });\r\n        return logTransaction(tx, \"SushiBar.leave()\", amount.toString());\r\n    }, []);\r\n\r\n    return {\r\n        enter,\r\n        leave\r\n    };\r\n};\r\n\r\nexport default useSushiBar;\r\n","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\r\n\r\nimport { ethers } from \"ethers\";\r\nimport useAsyncEffect from \"use-async-effect\";\r\nimport { SUSHI_BAR } from \"../constants/contracts\";\r\nimport { EthersContext } from \"../context/EthersContext\";\r\nimport Token from \"../types/Token\";\r\nimport { getContract, parseBalance } from \"../utils\";\r\nimport useSushiBar from \"./useSushiBar\";\r\n\r\nexport type StakeAction = \"sushi-balance\" | \"stake\";\r\nexport type UnstakeAction = \"xsushi-balance\" | \"unstake\";\r\n\r\nexport interface StakingState {\r\n    sushi?: Token;\r\n    xSushi?: Token;\r\n    sushiStaked?: ethers.BigNumber;\r\n    sushiSupply?: ethers.BigNumber;\r\n    xSushiSupply?: ethers.BigNumber;\r\n    amount: string;\r\n    setAmount: (amount: string) => void;\r\n    sushiAllowed: boolean;\r\n    setSushiAllowed: (allowed: boolean) => void;\r\n    xSushiAllowed: boolean;\r\n    setXSushiAllowed: (allowed: boolean) => void;\r\n    loading: boolean;\r\n    onEnter: () => Promise<void>;\r\n    entering: boolean;\r\n    onLeave: () => Promise<void>;\r\n    leaving: boolean;\r\n}\r\n\r\n// tslint:disable-next-line:max-func-body-length\r\nconst useStakingState: () => StakingState = () => {\r\n    const { signer, address, getTokenAllowance, tokens, updateTokens } = useContext(EthersContext);\r\n    const { enter, leave } = useSushiBar();\r\n    const [sushiStaked, setSushiStaked] = useState<ethers.BigNumber>();\r\n    const [sushiSupply, setSushiSupply] = useState<ethers.BigNumber>();\r\n    const [xSushiSupply, setXSushiSupply] = useState<ethers.BigNumber>();\r\n    const [amount, setAmount] = useState(\"\");\r\n    const [sushiAllowed, setSushiAllowed] = useState(false);\r\n    const [xSushiAllowed, setXSushiAllowed] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [entering, setEntering] = useState(false);\r\n    const [leaving, setLeaving] = useState(false);\r\n\r\n    const sushi = useMemo(() => tokens.find(token => token.symbol === \"SUSHI\"), [tokens]);\r\n    const xSushi = useMemo(() => tokens.find(token => token.symbol === \"xSUSHI\"), [tokens]);\r\n\r\n    useEffect(() => {\r\n        setAmount(\"\");\r\n    }, [address]);\r\n\r\n    useAsyncEffect(async () => {\r\n        if (sushi && xSushi && signer) {\r\n            setSushiAllowed(false);\r\n            setXSushiAllowed(false);\r\n            setLoading(true);\r\n            try {\r\n                const minAllowance = ethers.BigNumber.from(2)\r\n                    .pow(96)\r\n                    .sub(1);\r\n                const sushiAllowance = await getTokenAllowance(sushi.address, SUSHI_BAR);\r\n                setSushiAllowed(ethers.BigNumber.from(sushiAllowance).gte(minAllowance));\r\n                const xSushiAllowance = await getTokenAllowance(xSushi.address, SUSHI_BAR);\r\n                setXSushiAllowed(ethers.BigNumber.from(xSushiAllowance).gte(minAllowance));\r\n\r\n                const sushiContract = getContract(\"ERC20\", sushi.address, signer);\r\n                setSushiStaked(await sushiContract.balanceOf(SUSHI_BAR));\r\n                setSushiSupply(await sushiContract.totalSupply());\r\n                const xSushiContract = getContract(\"ERC20\", xSushi.address, signer);\r\n                setXSushiSupply(await xSushiContract.totalSupply());\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n    }, [sushi, xSushi, signer]);\r\n\r\n    const onEnter = useCallback(async () => {\r\n        if (amount && sushi && signer) {\r\n            setEntering(true);\r\n            try {\r\n                const parsed = parseBalance(amount, sushi.decimals);\r\n                const tx = await enter(parsed, signer);\r\n                if (tx) {\r\n                    await tx.wait();\r\n                    await updateTokens();\r\n                    setAmount(\"\");\r\n                }\r\n            } finally {\r\n                setEntering(false);\r\n            }\r\n        }\r\n    }, [amount, sushi, signer]);\r\n\r\n    const onLeave = useCallback(async () => {\r\n        if (amount && xSushi && signer) {\r\n            setLeaving(true);\r\n            try {\r\n                const parsed = parseBalance(amount, xSushi.decimals);\r\n                const tx = await leave(parsed, signer);\r\n                if (tx) {\r\n                    await tx.wait();\r\n                    await updateTokens();\r\n                    setAmount(\"\");\r\n                }\r\n            } finally {\r\n                setLeaving(false);\r\n            }\r\n        }\r\n    }, [amount, xSushi, signer]);\r\n\r\n    return {\r\n        sushi,\r\n        xSushi,\r\n        sushiStaked,\r\n        sushiSupply,\r\n        xSushiSupply,\r\n        amount,\r\n        setAmount,\r\n        sushiAllowed,\r\n        setSushiAllowed,\r\n        xSushiAllowed,\r\n        setXSushiAllowed,\r\n        loading,\r\n        onEnter,\r\n        entering,\r\n        onLeave,\r\n        leaving\r\n    };\r\n};\r\n\r\nexport default useStakingState;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Platform, View } from \"react-native\";\r\n\r\nimport AmountMeta from \"../components/AmountMeta\";\r\nimport BackgroundImage from \"../components/BackgroundImage\";\r\nimport Border from \"../components/Border\";\r\nimport Button from \"../components/Button\";\r\nimport ChangeNetwork from \"../components/ChangeNetwork\";\r\nimport Container from \"../components/Container\";\r\nimport Content from \"../components/Content\";\r\nimport ErrorMessage from \"../components/ErrorMessage\";\r\nimport FetchingButton from \"../components/FetchingButton\";\r\nimport Heading from \"../components/Heading\";\r\nimport InfoBox from \"../components/InfoBox\";\r\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\r\nimport Notice from \"../components/Notice\";\r\nimport Text from \"../components/Text\";\r\nimport Title from \"../components/Title\";\r\nimport TokenInput from \"../components/TokenInput\";\r\nimport WebFooter from \"../components/web/WebFooter\";\r\nimport { StakingSubMenu } from \"../components/web/WebSubMenu\";\r\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\r\nimport { EthersContext } from \"../context/EthersContext\";\r\nimport useStakingState, { StakingState } from \"../hooks/useStakingState\";\r\nimport useTranslation from \"../hooks/useTranslation\";\r\nimport MetamaskError from \"../types/MetamaskError\";\r\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\r\nimport Screen from \"./Screen\";\r\n\r\nconst UnstakeScreen = () => {\r\n    const t = useTranslation();\r\n    return (\r\n        <Screen>\r\n            <Container>\r\n                <BackgroundImage />\r\n                <Content>\r\n                    <Title text={t(\"unstake\")} />\r\n                    <Text light={true}>{t(\"unstake-desc\")}</Text>\r\n                    <Staking />\r\n                </Content>\r\n                {Platform.OS === \"web\" && <WebFooter />}\r\n            </Container>\r\n            <StakingSubMenu />\r\n        </Screen>\r\n    );\r\n};\r\n\r\nconst Staking = () => {\r\n    const { chainId } = useContext(EthersContext);\r\n    const t = useTranslation();\r\n    const state = useStakingState();\r\n    if (chainId !== 1) return <ChangeNetwork />;\r\n    return (\r\n        <View style={{ marginTop: Spacing.large }}>\r\n            <XSushiBalance state={state} />\r\n            <Border />\r\n            <AmountInput state={state} />\r\n            {state.xSushi && state.xSushi.balance.isZero() && (\r\n                <Notice text={t(\"you-dont-have-xsushi\")} color={\"orange\"} style={{ marginTop: Spacing.small }} />\r\n            )}\r\n            <UnstakeInfo state={state} />\r\n        </View>\r\n    );\r\n};\r\n\r\nconst XSushiBalance = ({ state }: { state: StakingState }) => {\r\n    const t = useTranslation();\r\n    return (\r\n        <View>\r\n            <Heading text={t(\"your-xsushi\")} />\r\n            <AmountMeta\r\n                amount={state.xSushi ? formatBalance(state.xSushi.balance, state.xSushi.decimals) : \"\"}\r\n                suffix={\"xSUSHI\"}\r\n            />\r\n        </View>\r\n    );\r\n};\r\n\r\nconst AmountInput = ({ state }: { state: StakingState }) => {\r\n    const t = useTranslation();\r\n    if (!state.xSushi || state.xSushi.balance.isZero()) {\r\n        return <Heading text={t(\"amount-to-unstake\")} disabled={true} />;\r\n    }\r\n    return (\r\n        <View>\r\n            <Heading text={t(\"amount-to-unstake\")} />\r\n            <TokenInput\r\n                token={state.xSushi}\r\n                amount={state.amount}\r\n                onAmountChanged={state.setAmount}\r\n                autoFocus={IS_DESKTOP}\r\n            />\r\n        </View>\r\n    );\r\n};\r\n\r\nconst UnstakeInfo = ({ state }: { state: StakingState }) => {\r\n    const disabled =\r\n        !state.sushi || !state.xSushi || !state.sushiStaked || !state.xSushiSupply || isEmptyValue(state.amount);\r\n    const sushiAmount = disabled\r\n        ? undefined\r\n        : parseBalance(state.amount, state.xSushi!.decimals)\r\n              .mul(state.sushiStaked!)\r\n              .div(state.xSushiSupply!);\r\n    return (\r\n        <InfoBox>\r\n            <AmountMeta\r\n                amount={sushiAmount ? formatBalance(sushiAmount, state.sushi!.decimals, 8) : \"\"}\r\n                suffix={\"SUSHI\"}\r\n                disabled={disabled}\r\n            />\r\n            <Controls state={state} />\r\n        </InfoBox>\r\n    );\r\n};\r\n\r\nconst Controls = ({ state }: { state: StakingState }) => {\r\n    const [error, setError] = useState<MetamaskError>({});\r\n    return (\r\n        <View style={{ marginTop: Spacing.normal }}>\r\n            {!state.xSushi || state.xSushi.balance.isZero() || isEmptyValue(state.amount) ? (\r\n                <UnstakeButton state={state} onError={setError} disabled={true} />\r\n            ) : parseBalance(state.amount, state.xSushi.decimals).gt(state.xSushi.balance) ? (\r\n                <InsufficientBalanceButton symbol={state.xSushi.symbol} />\r\n            ) : state.loading ? (\r\n                <FetchingButton />\r\n            ) : (\r\n                <UnstakeButton state={state} onError={setError} disabled={false} />\r\n            )}\r\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\r\n        </View>\r\n    );\r\n};\r\n\r\nconst UnstakeButton = ({\r\n    state,\r\n    onError,\r\n    disabled\r\n}: {\r\n    state: StakingState;\r\n    onError: (e) => void;\r\n    disabled: boolean;\r\n}) => {\r\n    const t = useTranslation();\r\n    const onPress = async () => {\r\n        onError({});\r\n        try {\r\n            await state.onLeave();\r\n            state.setAmount(\"\");\r\n        } catch (e) {\r\n            onError(e);\r\n        }\r\n    };\r\n    return <Button title={t(\"unstake\")} loading={state.leaving} onPress={onPress} disabled={disabled} />;\r\n};\r\n\r\nexport default UnstakeScreen;\r\n"],"sourceRoot":""}